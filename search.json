[{"path":"https://ethansansom.github.io/vlightr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 vlightr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ethansansom.github.io/vlightr/articles/highlighting-and-dplyr.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Highlighting and dplyr","text":"vignette describes functions designed working highlighted vectors columns data.frame tibble provides examples manipulating highlights using dplyr functions.","code":"library(vlightr) library(dplyr, warn.conflicts = FALSE)"},{"path":"https://ethansansom.github.io/vlightr/articles/highlighting-and-dplyr.html","id":"using-dplyracross-a-word-of-warning","dir":"Articles","previous_headings":"","what":"Using dplyr::across(), a word of warning","title":"Highlighting and dplyr","text":"section documents confusing error can arise using highlight_case() within dplyr::across() specific circumstance. ’re encountered error, short story across() formula syntax .fns = ~ f(.x) incompatible highlight_case() friends. Consider case want colour NA orange printed starwars tibble. example shows works cause error. rest section goes detail causing problem. Packages across tidyverse (notably purrr) use symbol .x represent argument anonymous (AKA lambda) function (e.g. ~ .na(.x)). , lambdas vlightr use convention. Unfortunately, symbol .x hot commodity introduce one conflict dplyr::across() highlight_case() (well vlightr’s *_case() functions). Consider earlier example, highlighted row Star Wars character Droid. small change across() call, ’ll introduce error. first formatter attr(,\"formatters\")[[1]], defined cli::bg_br_yellow(.x), returned length 87 result (number rows starwars) returned length 6 result (number Droids listed starwars), causing error. happens , formula lambda (e.g. ~templight_case(...)) used within across(), placeholder symbol .x replaced (usually) name current column. instance, name, first column starwars, mutated call across(), expression species == \"Droid\" ~ cli::bg_br_yellow(.x) substituted expression species == \"Droid\" ~ cli::bg_br_yellow(name). templight_case() converts right-hand-side formula formatter function, look like function(.x) cli::bg_br_yellow(name). formatter always terms column name, rather terms argument .x. Consequently, column name conditionally formatted, formatter function receives names 6 Droids highlight yellow, outputs cli::bg_br_yellow(name) instead, length 87 vector every character name starwars dataset. causes length error. can remedy several ways:","code":"starwars %>%   mutate(     across(       # Using `\\(col)` or `function(col)` will work       .cols = everthing(),       .fns = \\(col) highlight_case(col, is.na(.x) ~ color(\"orange\")(.x)))            # Using `~` will raise an error       # .fns = ~ highlight_case(.x, is.na(.x) ~ color(\"orange\")(.x)))     )   ) try(   starwars %>%   mutate(     across(       where(is_highlightable),       # Before: \\(col) templight_case(col, species == \"Droid\" ~ bg(\"yellow\")(.x))       ~templight_case(.x, species == \"Droid\" ~ cli::bg_br_yellow(.x))     )   ) ) #> Error in mutate(., across(where(is_highlightable), ~templight_case(.x,  :  #>   ℹ In argument: `across(...)`. #> Caused by error in `across()`: #> ! Can't compute column `name`. #> Caused by error in `highlight()`: #> ! Attempted to create a malformed <vlightr_highlight> vector of type #>   <highlight<character>>. #> ✖ Can't evaluate <vlightr_highlight> vector's `format()` method. #> Caused by error in `format()`: #> ! Formatter `attr(,\"formatters\")[[1]]` must produce a <character> vector #>   of length 1 or `length(x)`. #> ℹ Produced a length 87 result. #> ℹ `x` has length 6. starwars %>%   mutate(     across(       where(is_highlightable),       # This works:       \\(x) templight_case(x, species == \"Droid\" ~ cli::bg_br_yellow(.x))              # These also work:       # ~ templight_case(x, species == \"Droid\" ~ \\(x) cli::bg_br_yellow(x))       # ~ templight(x, species == \"Droid\", ~ cli::bg_br_yellow(.x))     )   ) %>%   select(1:4) #> # A tibble: 87 × 4 #>                  name       height         mass    hair_color #>          <hlght<chr>> <hlght<int>> <hlght<dbl>>  <hlght<chr>> #>  1     Luke Skywalker          172           77         blond #>  2              C-3PO          167           75            NA #>  3              R2-D2           96           32            NA #>  4        Darth Vader          202          136          none #>  5        Leia Organa          150           49         brown #>  6          Owen Lars          178          120   brown, grey #>  7 Beru Whitesun Lars          165           75         brown #>  8              R5-D4           97           32            NA #>  9  Biggs Darklighter          183           84         black #> 10     Obi-Wan Kenobi          182           77 auburn, white #> # ℹ 77 more rows"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"conditional-formatting","dir":"Articles","previous_headings":"","what":"Conditional Formatting","title":"Conditionally format arbitrary vectors","text":"’s basic functionality, highlight() function uses 3 arguments: x, conditions, formatters. arguments x conditions required. formatters supplied, default set provided. useful quick checks exact format isn’t important. Multiple conditions formatters can specified supplying lists functions purrr-style lambdas. Elements x conditions[[]](x) returns TRUE formatted using formatters[[]]. default, formatters applied order supplied. can change order application supplying precedence. highlighted vector’s conditional formatting can also updated using update_highlight(), takes arguments highlight(). following equivalent update made . Elements even_or_negative meet multiple conditions (.e. even negative) formatted multiple times (e.g. \"[(-4)]\", \"[(-2)]\"). format elements according first condition met, set format_once = TRUE. ’s unclear highlighted vector formatted, use describe_highlight() get brief description highlight’s conditional formatting. describe_highlight() function uses description attribute highlighted vector provide additional context.","code":"above_mean <- highlight(   # A vector to conditionally format   x = 1:10,   # Condition(s), determine which elements of `x` are formatted   conditions = ~ .x > mean(.x),   # Formatter(s), specify how chosen elements of `x` are formatted   formatters = ~ paste0(\"[\", .x, \"]\") ) highlight(1:10, ~ .x %in% 3:5) #> <highlight<integer>[10]> #> [1] 1  2  3  4  5  6  7  8  9  10 even_or_negative <- highlight(   x = -4:3,   conditions = list(     \\(x) x %% 2 == 0,        # test if `x` is even     \\(x) x < 0               # test if `x` is negative   ),   formatters = list(     ~ paste0(\"[\", .x, \"]\"),  # format if `x` is even     ~ paste0(\"(\", .x, \")\")   # format if `x` is negative   ) ) print(even_or_negative) #> <highlight<integer>[8]> #> [1] ([-4]) (-3)   ([-2]) (-1)   [0]    1      [2]    3 # Change even and negative format from \"([])\" to \"[()]\" highlight(   x = even_or_negative,   conditions = list(\\(x) x %% 2 == 0, \\(x) x < 0),   formatters = list(~ paste0(\"[\", .x, \"]\"), ~ paste0(\"(\", .x, \")\")),   precedence = c(2, 1) ) #> <highlight<integer>[8]> #> [1] [(-4)] (-3)   [(-2)] (-1)   [0]    1      [2]    3 even_or_negative <- update_highlight(even_or_negative, precedence = c(2, 1)) print(even_or_negative) #> <highlight<integer>[8]> #> [1] [(-4)] (-3)   [(-2)] (-1)   [0]    1      [2]    3 update_highlight(even_or_negative, format_once = TRUE) #> <highlight<integer>[8]> #> [1] (-4) (-3) (-2) (-1) [0]  1    [2]  3 describe_highlight(even_or_negative) #> A conditionally formatted <integer> vector with 2 conditional formats: #> 1. Conditional Format 2 #> 2. Conditional Format 1 #> Element formatted using: #> • 1:       -3 -> (-3) #> • 1 and 2: -4 -> [(-4)] #> • 2:        0 -> [0] even_or_negative <- update_highlight(   even_or_negative,    description = c(\"Even\", \"Negative\") ) describe_highlight(even_or_negative) #> A conditionally formatted <integer> vector with 2 conditional formats: #> 1. Negative #> 2. Even #> Element formatted using: #> • 1:       -3 -> (-3) #> • 1 and 2: -4 -> [(-4)] #> • 2:        0 -> [0]"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"manipulating-highlighted-data","dir":"Articles","previous_headings":"","what":"Manipulating Highlighted Data","title":"Conditionally format arbitrary vectors","text":"Highlighted vectors (class vlightr_highlight) designed introduce little friction possible, require legwork use. Attempting coerce convert vlightr_highlight another vector type result error. Highlights , however, compatible highlights. possible, highlighted vectors casting coercion rules underlying vector type. hl() synonym highlight(), useful quick inline highlighting. Arithmetic, comparison, math functions supported vctrs::vec_math() work box. Notice conditional formatting persistent, changing underlying data highlighted vector also change element formatted.","code":"mean_or_above <- highlight(1:6, ~ .x >= mean(.x), ~ paste0(\"[\", .x, \"]\")) try(mean_or_above[[5]] <- 100L) #> Error in `[<-`(`*tmp*`, i, value = 100L) :  #>   Can't convert `value` <integer> to <highlight<integer>>. # <highlight<integer>> and <highlight<integer>> are compatible mean_or_above[[5]] <- hl(100L)  # <highlight<integer>> and <highlight<character>> are not try(mean_or_above[[5]] <- hl(\"100!\")) #> Error in vec_cast.vlightr_highlight.vlightr_highlight(x = x, to = to,  :  #>   Can't convert <highlight<character>> to <highlight<integer>>. # Arithmetic mean_or_above - hl(2.0) #> <highlight<double>[6]> #> [1] -1   0    1    2    [98] 4 # Comparison pmin(mean_or_above, hl(4)) #> <highlight<integer>[6]> #> [1] 1   2   [3] [4] [4] [4] # Math sum(mean_or_above) #> <highlight<integer>[1]> #> [1] [116]"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"highlight-un-highlight-re-highlight","dir":"Articles","previous_headings":"","what":"Highlight, Un-Highlight, Re-Highlight","title":"Conditionally format arbitrary vectors","text":"default, many functions won’t know highlighted vector, resulting error. highlight can un-highlighted (converted back ’s original class) using un_highlight() function. allows highlighted vector used expected, expense ’s conditional formatting. re_highlight() function can used re-apply conditional formatting removed un_highlight(). Together, highlight(), un_highlight(), re_highlight() provide core functionality vlightr. highlight() (synonym hl()) highlights vector. un_highlight() (synonym ul()) removes vector’s highlighting expose ’s underlying data. re_highlight() (synonym rl()) applies format existing highlighted vector another vector. functions shorthand synonyms allow highlights used almost normal vectors. “highlight-pipe” %hl>% wrapper around magrittr %>% pipe un-highlights left-hand-side input re-highlights right-hand-side output. re_highlight(x, ...) accepts number highlighted vectors ... used re-highlight vector x. useful restoring conditional formatting multiple highlights used within single function. x argument re_highlight() highlighted vector, ’s conditional formatting highlights supplied ... combined. data x used output vector.","code":"try(as.logical(mean_or_above)) #> Error in as.logical(mean_or_above) :  #>   Can't convert `x` <highlight<integer>> to <logical>. try(which.min(mean_or_above)) #> Error in which.min(mean_or_above) :  #>   'list' object cannot be coerced to type 'double' as.logical(un_highlight(mean_or_above)) #> [1] TRUE TRUE TRUE TRUE TRUE TRUE which.min(un_highlight(mean_or_above)) #> [1] 1 re_highlight(as.logical(un_highlight(mean_or_above)), mean_or_above) #> <highlight<logical>[6]> #> [1] [TRUE] [TRUE] [TRUE] [TRUE] [TRUE] [TRUE] re_highlight(which.min(un_highlight(mean_or_above)), mean_or_above) #> <highlight<integer>[1]> #> [1] [1] # Emphasize `NA` values indicators <- highlight(c(1L, 0L, NA, 1L), is.na, ~ paste(\"[\", .x, \"]\")) indicators #> <highlight<integer>[4]> #> [1] 1      0      [ NA ] 1 # Convert to a logical vector indicators |>   un_highlight() |>   as.logical() |>   re_highlight(indicators) #> <highlight<logical>[4]> #> [1] TRUE   FALSE  [ NA ] TRUE indicators %hl>% as.logical() #> <highlight<logical>[4]> #> [1] TRUE   FALSE  [ NA ] TRUE # Highlight phrases containing an exclamation exclamations <- \"(wow|neat|cool)\" exclaim <- highlight(   c(\"wow that's great\", \"okay\", \"what a cool dude\", \"no\"),   ~ grepl(exclamations, .x),   ~ paste0(.x, \"!\") ) exclaim #> <highlight<character>[4]> #> [1] \"wow that's great!\" \"okay\"              \"what a cool dude!\" #> [4] \"no\" # Highlight phrases containing a question questions <- \"(what|where|when)\" question <- highlight(   c(\"news\", \"neat, when is that\", \"where is he\", \"thanks\"),   ~ grepl(questions, .x),   ~ paste0(.x, \"?\") ) question #> <highlight<character>[4]> #> [1] \"news\"                \"neat, when is that?\" \"where is he?\"        #> [4] \"thanks\" # Un-Highlight, Do Something, Re-Highlight paste(ul(exclaim), ul(question)) |> rl(exclaim, question) #> <highlight<character>[4]> #> [1] \"wow that's great news!\"         \"okay neat, when is that!?\"      #> [3] \"what a cool dude where is he!?\" \"no thanks\" re_highlight(x = exclaim, question) #> <highlight<character>[4]> #> [1] \"wow that's great!\"  \"okay\"               \"what a cool dude!?\" #> [4] \"no\""},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"applying-multiple-formats","dir":"Articles","previous_headings":"","what":"Applying Multiple Formats","title":"Conditionally format arbitrary vectors","text":"Multiple conditions formatters can specified supplying lists functions purrr-style lambdas. two compatible highlights combined, conditions formatters. error occur combination multiple highlights causes conditions formatters fail. precedence highlighted vectors maintained combined. example, can set highlighted vector’s precedence prioritize ’s format. defining complex conditional formatting, highlight_case() (inspired dplyr::case_when()) can make relationship condition ’s corresponding format clear. Unlike highlight(), .format_once argument highlight_case() TRUE default. dplyr::case_when(), means element x allowed match exactly one condition (first condition met).","code":"min_max <- highlight(   x = 1:5,   conditions = list(     ~ .x == min(.x),      ~ .x == max(.x)   ),   formatters = list(     ~ paste0(\"(Min = \", .x, \")\"),      ~ paste0(\"(Max = \", .x, \")\")   ) ) print(min_max) #> <highlight<integer>[5]> #> [1] (Min = 1) 2         3         4         (Max = 5) c(min_max[1:3], mean_or_above[2:4]) #> <highlight<integer>[6]> #> [1] (Min = 1)   2           [3]         2           [3]         (Max = [4]) # A highlighted vector with a hidden error int_hl <- highlight(   c(1L, 2L, 3L),    conditions = ~ !is.integer(.x),   formatters = \\(x) stop(\"Integers only!\") ) # This runs fine int_hl #> <highlight<integer>[3]> #> [1] 1 2 3 # This does not try(c(int_hl, hl(0.5))) #> Error in vec_cast() :  #>   Conversion produced a malformed <vlightr_highlight> vector. #> Caused by error in `format()`: #> ! <vlightr_highlight> vector has a malformed `format()` method. #> Caused by error in `attr(,\"formatters\")[[1]]`: #> ! Integers only! even_is_red <- hl(1:3, ~ .x %% 2 == 0, cli::col_red, precedence = 2) even_is_green <- hl(4:6, ~ .x %% 2 == 0, cli::col_green, precedence = 1) c(even_is_red, even_is_green) #> <highlight<integer>[6]> #> [1] 1 2 3 4 5 6 summary_hl <- highlight_case(   x = 1:5,   .x == min(.x) ~ paste0(\"(Min = \", .x, \")\"),   .x == quantile(.x, 0.5) ~ paste0(\"(Mid = \", .x, \")\"),   .x == max(.x) ~ paste0(\"(Max = \", .x, \")\"),   .x > quantile(.x, 0.5) ~ paste(\"[ High\", .x, \"]\"),   .x < quantile(.x, 0.5) ~ paste(\"[ Low\", .x, \"]\") ) summary_hl #> <highlight<integer>[5]> #> [1] (Min = 1)  [ Low 2 ]  (Mid = 3)  [ High 4 ] (Max = 5)"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"highlighters","dir":"Articles","previous_headings":"","what":"Highlighters","title":"Conditionally format arbitrary vectors","text":"as_highlighter() converts conditionally formatted vector function applies conditional formatting vectors. Highlighter functions accept arguments highlight(), additional highlights can applied top existing ones. highlighter can defined scratch using highlighter() highlighter_case(). functions take arguments highlight() highlight_case() respectively, excluding first argument x.","code":"summary_highlighter <- as_highlighter(summary_hl) summary_highlighter(-2:2) #> <highlight<integer>[5]> #> [1] (Min = -2) [ Low -1 ] (Mid = 0)  [ High 1 ] (Max = 2) summary_highlighter(   x = -2:2,    conditions = ~ .x > 0,    formatters = ~ paste0(\"+\", .x),   precedence = 0,   format_once = FALSE ) #> <highlight<integer>[5]> #> [1] [ Low (Min = -2) ]  [ Low -1 ]          (Mid = 0)           #> [4] [ High +1 ]         [ High (Max = +2) ] secret <- highlighter(   conditions = ~ grepl(\"^<.*>$\", .x),   formatters = ~ strrep(\"x\", nchar(.x) - 2L) ) secret(c(\"This\", \"<is>\", \"a\", \"<secret>\", \"<.>\")) #> <highlight<character>[5]> #> [1] \"This\"   \"xx\"     \"a\"      \"xxxxxx\" \"x\" dollars <- highlighter_case(   is.na(.x) ~ \"NA\",   .x > 0 ~ paste0(\"-$\", .x),   TRUE ~ paste0(\"$\", .x),   .init_formatter = \\(x) sprintf(\"%.2f\", abs(x)) ) dollars(c(-10, 0.12, 130.0234, NA)) #> <highlight<double>[4]> #> [1] $10.00   -$0.12   -$130.02 NA"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"styling","dir":"Articles","previous_headings":"","what":"Styling","title":"Conditionally format arbitrary vectors","text":"Highlights can formatted using ANSI escape sequences, used color text cli package. code colors formatted NA values red. vlightr provides convenience functions selecting cli functions use formatters. color() colour() return cli::col_* function colors text bg() background() return cli::bg_* function colors text’s background style() returns cli::style_* function styles text (e.g. underlines, italicizes, etc.) example, NA highlight can achieved like : See cli::style_bold() friends details ANSI colored styled text.","code":"highlight(c(1, 0, NA), is.na, cli::col_red) #> <highlight<double>[3]> #> [1] 1  0  NA highlight(c(1, 0, NA), is.na, color(\"red\")) #> <highlight<double>[3]> #> [1] 1  0  NA"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"highlighting-columns","dir":"Articles","previous_headings":"","what":"Highlighting Columns","title":"Conditionally format arbitrary vectors","text":"Highlighted vectors can used columns tibble() data.frame() (caveats). ’ll use starwars dataset, comes dplyr, example. Let’s start highlighting species Star Wars characters Droids. won’t work data.frame, ANSI escape sequences used style color text aren’t interpreted data.frame printed. Formatters return character vector, instead ANSI string vector, work ’d expect. Taking occasional care use highlight-pipe %hl>%, re_highlight() un_highlight(), highlighted columns can manipulated like vector. , instead highlighting species column character Droid, highlighted entire row? Using highlight(), run problem. conditions argument highlight() must function test highlighted vector (e.g. current col) test another vector (e.g. species column). tibble formatted, highlighted vector attempts evaluate call condition function function(.x) species == \"Droid\", unable find species column - causing error . , instead use templight() templight_case(). functions behave exactly highlight() highlight_case(), take logical vector (list thereof) conditions argument. templight() stands “temporary highlight” conditional formatting created templight() temporarily correct. , functions mostly useful highlighting columns immediately tibble printed. Consider happens temporarily highlighted columns arrange dataset character height. second third rows still highlighted, despite characters Tarfful Lama Su droids. conditions vector highlighted using templight() change highlighted vector changed. Nonetheless, templight() templight_case() can useful calling attention important observations without filtering rows dataset. especially useful exploring data interactively co-workers peers (reason first version vlightr written). See vignette(\"highlighting--dplyr\") details.","code":"starwars_hl <- starwars %>%   select(name, species, everything()) %>%   mutate(species = hl(species, ~ .x == \"Droid\", bg(\"bright_yellow\")))  starwars_hl %>% head() #> # A tibble: 6 × 14 #>   name     species height  mass hair_color skin_color eye_color birth_year sex   #>   <chr>    <hlght>  <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> #> 1 Luke Sk…   Human    172    77 blond      fair       blue            19   male  #> 2 C-3PO      Droid    167    75 NA         gold       yellow         112   none  #> 3 R2-D2      Droid     96    32 NA         white, bl… red             33   none  #> 4 Darth V…   Human    202   136 none       white      yellow          41.9 male  #> 5 Leia Or…   Human    150    49 brown      light      brown           19   fema… #> 6 Owen La…   Human    178   120 brown, gr… light      blue            52   male  #> # ℹ 5 more variables: gender <chr>, homeworld <chr>, films <list>, #> #   vehicles <list>, starships <list> starwars_hl %>% as.data.frame() %>% head() #>             name                species height mass  hair_color  skin_color #> 1 Luke Skywalker                  Human    172   77       blond        fair #> 2          C-3PO \\033[103mDroid\\033[49m    167   75        <NA>        gold #> 3          R2-D2 \\033[103mDroid\\033[49m     96   32        <NA> white, blue #> 4    Darth Vader                  Human    202  136        none       white #> 5    Leia Organa                  Human    150   49       brown       light #> 6      Owen Lars                  Human    178  120 brown, grey       light #>   eye_color birth_year    sex    gender homeworld #> 1      blue       19.0   male masculine  Tatooine #> 2    yellow      112.0   none masculine  Tatooine #> 3       red       33.0   none masculine     Naboo #> 4    yellow       41.9   male masculine  Tatooine #> 5     brown       19.0 female  feminine  Alderaan #> 6      blue       52.0   male masculine  Tatooine #>                                                                                                                                       films #> 1                                           A New Hope, The Empire Strikes Back, Return of the Jedi, Revenge of the Sith, The Force Awakens #> 2                    A New Hope, The Empire Strikes Back, Return of the Jedi, The Phantom Menace, Attack of the Clones, Revenge of the Sith #> 3 A New Hope, The Empire Strikes Back, Return of the Jedi, The Phantom Menace, Attack of the Clones, Revenge of the Sith, The Force Awakens #> 4                                                              A New Hope, The Empire Strikes Back, Return of the Jedi, Revenge of the Sith #> 5                                           A New Hope, The Empire Strikes Back, Return of the Jedi, Revenge of the Sith, The Force Awakens #> 6                                                                                     A New Hope, Attack of the Clones, Revenge of the Sith #>                             vehicles                starships #> 1 Snowspeeder, Imperial Speeder Bike X-wing, Imperial shuttle #> 2                                                             #> 3                                                             #> 4                                             TIE Advanced x1 #> 5              Imperial Speeder Bike                          #> 6 starwars_hl %>%   mutate(species = update_highlight(species, formatters = wrap(\"[ \", \" ]\"))) %>%   head() #> # A tibble: 6 × 14 #>   name     species height  mass hair_color skin_color eye_color birth_year sex   #>   <chr>  <hlght<c>  <int> <dbl> <chr>      <chr>      <chr>          <dbl> <chr> #> 1 Luke …     Human    172    77 blond      fair       blue            19   male  #> 2 C-3PO  [ Droid ]    167    75 NA         gold       yellow         112   none  #> 3 R2-D2  [ Droid ]     96    32 NA         white, bl… red             33   none  #> 4 Darth…     Human    202   136 none       white      yellow          41.9 male  #> 5 Leia …     Human    150    49 brown      light      brown           19   fema… #> 6 Owen …     Human    178   120 brown, gr… light      blue            52   male  #> # ℹ 5 more variables: gender <chr>, homeworld <chr>, films <list>, #> #   vehicles <list>, starships <list> starwars_hl %>%   # Indicate whether a character is short or tall   mutate(     height = highlight_case(       height,       .x < quantile(.x, 0.25, na.rm = TRUE) ~ paste(\"[Short]\", .x),       .x > quantile(.x, 0.75, na.rm = TRUE) ~ paste(\"[Tall]\", .x),       .init_formatter = ~format(round(.x, 0))     )   ) %>%   # Get the mean height and count of characters by species   group_by(species) %>%   summarize(     count = n(),     height = height %hl>% mean(na.rm = TRUE)   ) %>%   arrange(desc(count)) #> # A tibble: 38 × 3 #>         species count       height #>    <hlght<chr>> <int> <hlght<dbl>> #>  1        Human    35          178 #>  2        Droid     6  [Short] 131 #>  3           NA     4          175 #>  4       Gungan     3   [Tall] 209 #>  5     Kaminoan     2   [Tall] 221 #>  6     Mirialan     2  [Short] 168 #>  7      Twi'lek     2          179 #>  8      Wookiee     2   [Tall] 231 #>  9       Zabrak     2          173 #> 10       Aleena     1  [Short]  79 #> # ℹ 28 more rows try(   starwars %>%     mutate(       across(         .cols = where(is_highlightable),          .fns = \\(col) highlight(col, ~ species == \"Droid\", bg(\"bright_yellow\"))       )     ) %>%     format() ) #> Error in format(x) :  #>   <vlightr_highlight> vector has a malformed `format()` method. #> Caused by error in `attr(,\"conditions\")[[1]]`: #> ! Obsolete data mask. #> ✖ Too late to resolve `species` after the end of `dplyr::mutate()`. #> ℹ Did you save an object that uses `species` lazily in a column in the #>   `dplyr::mutate()` expression ? starwars_hl <- starwars %>%   select(name, species, everything()) %>%   mutate(     across(       .cols = where(is_highlightable),        .fns = \\(col) templight(col, species == \"Droid\", bg(\"bright_yellow\"))     )   )  starwars_hl %>% head() #> # A tibble: 6 × 14 #>             name      species     height  mass  hair_color  skin_color eye_color #>     <hlght<chr>> <hlght<chr>> <hlght<in> <hlg> <hlght<chr> <hlght<chr> <hlght<c> #> 1 Luke Skywalker        Human        172    77       blond        fair      blue #> 2          C-3PO        Droid        167    75          NA        gold    yellow #> 3          R2-D2        Droid         96    32          NA white, blue       red #> 4    Darth Vader        Human        202   136        none       white    yellow #> 5    Leia Organa        Human        150    49       brown       light     brown #> 6      Owen Lars        Human        178   120 brown, grey       light      blue #> # ℹ 7 more variables: birth_year <hlght<dbl>>, sex <hlght<chr>>, #> #   gender <hlght<chr>>, homeworld <hlght<chr>>, films <list>, vehicles <list>, #> #   starships <list> starwars_hl %>% arrange(desc(height)) %>% head() #> # A tibble: 6 × 14 #>           name      species   height  mass hair_color   skin_color     eye_color #>   <hlght<chr>> <hlght<chr>> <hlght<> <hlg> <hlght<ch> <hlght<chr>>  <hlght<chr>> #> 1  Yarael Poof     Quermian      264    NA       none        white        yellow #> 2      Tarfful      Wookiee      234   136      brown        brown          blue #> 3      Lama Su     Kaminoan      229    88       none         grey         black #> 4    Chewbacca      Wookiee      228   112      brown      unknown          blue #> 5 Roos Tarpals       Gungan      224    82       none         grey        orange #> 6     Grievous      Kaleesh      216   159       none brown, white green, yellow #> # ℹ 7 more variables: birth_year <hlght<dbl>>, sex <hlght<chr>>, #> #   gender <hlght<chr>>, homeworld <hlght<chr>>, films <list>, vehicles <list>, #> #   starships <list> # Character's key to explaining Luke's troubled relationship with his father starwars_hl %>%    filter(homeworld == hl(\"Tatooine\")) %>%   mutate(     name = un_highlight(name),     across(       .cols = where(is_highlightable),       .fns = \\(col) templight_case(         col,         name == \"Darth Vader\" ~ bg(\"bright_red\")(.x),         name == \"Luke Skywalker\" ~ bg(\"bright_green\")(.x),         name == \"Anakin Skywalker\" ~ bg(\"bright_blue\")(.x)       )     )   ) %>%   select(1:4) #> # A tibble: 10 × 4 #>                  name      species       height         mass #>          <hlght<chr>> <hlght<chr>> <hlght<int>> <hlght<dbl>> #>  1     Luke Skywalker        Human          172           77 #>  2              C-3PO        Droid          167           75 #>  3        Darth Vader        Human          202          136 #>  4          Owen Lars        Human          178          120 #>  5 Beru Whitesun Lars        Human          165           75 #>  6              R5-D4        Droid           97           32 #>  7  Biggs Darklighter        Human          183           84 #>  8   Anakin Skywalker        Human          188           84 #>  9     Shmi Skywalker        Human          163           NA #> 10        Cliegg Lars        Human          183           NA"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"highlighting-vectors-in-the-wild","dir":"Articles","previous_headings":"","what":"Highlighting Vectors in the Wild","title":"Conditionally format arbitrary vectors","text":"Informally, highlight-able vector collection size 1 elements. means list, can contain elements varying sizes, non-highlightable (although list can contain highlighted vectors). Formally, is_highlightable() uses following criteria test whether object x can highlighted: x data.frame() (dataframe subclass) x bare list() x otherwise vector, defined vctrs::obj_is_vector() highlight() function (friends hl(), highlight_case(), hl_case()) provide extra arguments useful refining user-generated vectors highlighted. Let’s highlight lubridate::interval vector named long_interval refine ’s format method using extra arguments. init_formatter (“initial formatter”) function called start highlighted vector’s format() method, conditional formatting takes place. expects single input, highlighted vector’s data, return formatted vector ’s result. Suppose don’t want see hours-minutes-seconds component dates long_interval. can define initial formatter format_interval just . ’re , can remove first timezone (\"UTC\") element formatted interval last_formatter function called end highlighted vector’s format() method, conditionally formatted. useful limiting text width formatted highlight. packaging custom init_formatter last_formatter together highlighter, can reuse wherever highlight interval vector.","code":"long_interval <- interval(   start = ymd_hms(\"19910101120000\") + dyears(c(5, 10, 15)),    end = ymd_hms(\"20240101120000\") + dseconds(c(3, 7, 12)),    tzone = \"UTC\" )  highlight(long_interval) #> <highlight<Interval>[3]> #> [1] 1996-01-01 18:00:00 UTC--2024-01-01 12:00:03 UTC #> [2] 2001-01-01 00:00:00 UTC--2024-01-01 12:00:07 UTC #> [3] 2006-01-01 06:00:00 UTC--2024-01-01 12:00:12 UTC format_interval <- function(x) {   # Remove the h-m-s component of the interval's start and end   start <- as.Date(int_start(x))   end <- as.Date(int_end(x))      # Format the output as \"start--end tzone\"   out <- paste0(start, \"--\", end, \" \", attr(x, \"tzone\"))      # Remember to preserve NA values from `x`   out[is.na(x)] <- NA_character_   out }  highlight(long_interval, init_formatter = format_interval) #> <highlight<Interval>[3]> #> [1] 1996-01-01--2024-01-01 UTC 2001-01-01--2024-01-01 UTC #> [3] 2006-01-01--2024-01-01 UTC # Truncate elements of a character vector such that `all(nchar(x) <= char_limit)` format_truncated <- function(x, char_limit = 40) {   # Check which strings in `x` exceed the `char_limit`   x_char <- nchar(x)   above_limit <- x_char > char_limit   if (!any(above_limit)) {     return(x)   }      # Split strings above the `char_limit` into a prefix and suffix,    # leaving room to insert a \"...\" in between.   substr_size <- floor(char_limit / 2)   suffix_start <- x_char[above_limit] - substr_size + 2   x_prefix <- substr(x[above_limit], 1, substr_size - 1)   x_suffix <- substr(x[above_limit], suffix_start, x_char[above_limit])      # Truncate the too-long strings and insert a \"...\" in the middle   x[above_limit] <- paste0(x_prefix, \"...\", x_suffix)   x }  # Test the formatter format_truncated(c(\"this\", \"is\", \"a\", \"huuuuuuuuuge\", \"character\"), 7) #> [1] \"this\"    \"is\"      \"a\"       \"hu...ge\" \"ch...er\" highlight_interval <- highlighter(   init_formatter = format_interval,   last_formatter = format_truncated )  highlight_interval(   long_interval,    ~ym(\"200001\") %within% .x,    ~paste(.x, \"[Contains the Millenium!!]\") ) #> <highlight<Interval>[3]> #> [1] 1996-01-01--2024-01...ns the Millenium!!] #> [2] 2001-01-01--2024-01-01 UTC                #> [3] 2006-01-01--2024-01-01 UTC"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"under-the-hood","dir":"Articles","previous_headings":"","what":"Under the Hood","title":"Conditionally format arbitrary vectors","text":"section meant provide intuition vlightr_highlight vectors formatted. Consider vector x_hl defined . ’ll just assume x highlight-able vector conditions, formatters, precedence, init_formatter, last_formatter valid arguments. format(x_hl) called (e.g. within print(x_hl)) following pseudo-code executed. init_formatter formatter function access underlying vector data x. , conditional formatting performed conditions formatters performed init_formatter alone.","code":"x_hl <- highlight(  x = x,  conditions = conditions,  formatters = formatters,  precedence = precedence,  init_formatter = init_formatter,  last_formatter = last_formatter ) # Apply an initial format to `x`, converting `x` into a character vector. formatted <- init_formatter(x)  # Apply each format in `formatters` to the elements of `x` which meet a  # condition. Do so in the order specified by `precedence`. format_order <- order(precedence) for (i in format_order) {   condition <- conditions[[i]]   formatter <- formatters[[i]]   condition_is_met <- condition(x)   formatted[condition_is_met] <- formatter(formatted[condition_is_met]) }  # Apply the last format before returning last_formatter(formatted)"},{"path":"https://ethansansom.github.io/vlightr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ethan Sansom. Author, maintainer.","code":""},{"path":"https://ethansansom.github.io/vlightr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sansom E (2024). vlightr: Persistent Conditional Formatting Vectors. R package version 0.1.0, https://ethansansom.github.io/vlightr/, https://github.com/EthanSansom/vlightr.","code":"@Manual{,   title = {vlightr: Persistent Conditional Formatting for Vectors},   author = {Ethan Sansom},   year = {2024},   note = {R package version 0.1.0, https://ethansansom.github.io/vlightr/},   url = {https://github.com/EthanSansom/vlightr}, }"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"vlightr","dir":"","previous_headings":"","what":"Persistent Conditional Formatting for Vectors","title":"Persistent Conditional Formatting for Vectors","text":"vlightr package conditionally formatting vectors. can highlight() vector style, color, otherwise re-format ’s elements vector printed formatted. Highlights : Persistent, meaning highlighted vectors can manipulated (minimal legwork) maintaining custom formatting. Generic, meaning many vectors ’ll encounter wild base atomic vectors (\"logical\", \"integer\", \"numeric\", \"complex\", \"character\" \"raw\") can highlighted.","code":""},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Persistent Conditional Formatting for Vectors","text":"⚠️ package still construction. ⚠️ can install development version vlightr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"EthanSansom/vlightr\")"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Persistent Conditional Formatting for Vectors","text":"Quickly customize vector printed. column displayed.","code":"library(vlightr) library(lubridate, warn.conflicts = FALSE) library(ivs) dates <- lubridate::ymd(\"20240619\") + lubridate::weeks(-3:2)  format_roygbiv1 <- function(x) {   vroygbi <- c(\"violet\", \"red\", \"orange\", \"gold\", \"green\", \"blue\", \"purple\")   crayons <- lapply(vroygbi, vlightr::color)   letters <- strsplit(as.character(x), \"\")[[1]]   letters |>     mapply(seq_along(letters), FUN = \\(x, i) crayons[[i %% 7 + 1]](x)) |>     paste(collapse = \"\") } format_roygbiv <- function(x) sapply(x, format_roygbiv1)  dates <- vlightr::highlight(dates, ~ lubridate::month(.x) == 6, format_roygbiv) print(dates) #> <highlight<date>[6]>                                                             #> [1] 2024-05-29 2024-06-05 2024-06-12 2024-06-19 2024-06-26 2024-07-03 tibble::tibble(   month = lubridate::month(vlightr::ul(dates), label = TRUE),   date = dates ) #> # A tibble: 6 × 2                                                                #>   month          date                                                            #>   <ord> <hlght<date>>                                                            #> 1 May      2024-05-29                                                            #> 2 Jun      2024-06-05                                                            #> 3 Jun      2024-06-12                                                            #> 4 Jun      2024-06-19                                                            #> 5 Jun      2024-06-26                                                            #> 6 Jul      2024-07-03"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"highlight-un-highlight-re-highlight","dir":"","previous_headings":"Features","what":"Highlight, Un-Highlight, Re-Highlight","title":"Persistent Conditional Formatting for Vectors","text":"Highlighted vectors can’t implicitly coerced converted another vector type. use function expects highlight’s underlying type (ex. date) first un_highlight() (AKA ul()) expose highlighted data re_highlight() (AKA rl()) re-apply conditional formatting. “highlight-pipe” %hl>% wraps magrittr %>% automatically.","code":"dates |>   vlightr::ul() |>   lubridate::rollback() |>   vlightr::rl(dates) #> <highlight<date>[6]>                                                             #> [1] 2024-04-30 2024-05-31 2024-05-31 2024-05-31 2024-05-31 2024-06-30 dates %hl>% lubridate::rollback() #> <highlight<date>[6]>                                                             #> [1] 2024-04-30 2024-05-31 2024-05-31 2024-05-31 2024-05-31 2024-06-30"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"manipulate-highlighted-data","dir":"","previous_headings":"Features","what":"Manipulate Highlighted Data","title":"Persistent Conditional Formatting for Vectors","text":"Highlighted vectors happy cast coerced compatible highlights. shorthand hl() useful quickly highlighting vector purpose.","code":"# Arithmetic dates + vlightr::hl(17) #> <highlight<date>[6]>                                                             #> [1] 2024-06-15 2024-06-22 2024-06-29 2024-07-06 2024-07-13 2024-07-20 # Assignment dates[[1]] <- vlightr::hl(NA) dates #> <highlight<date>[6]>                                                             #> [1] NA         2024-06-05 2024-06-12 2024-06-19 2024-06-26 2024-07-03 # Coercion c(dates, vlightr::hl(lubridate::ymd_hm(\"2020-06-01 12:00\"))) #> <highlight<datetime<UTC>>[7]>                                                    #> [1] NA                  2024-06-05 00:00:00 2024-06-12 00:00:00                  #> [4] 2024-06-19 00:00:00 2024-06-26 00:00:00 2024-07-03 00:00:00                  #> [7] 2020-06-01 12:00:00"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"multiple-conditional-formats","dir":"","previous_headings":"Features","what":"Multiple Conditional Formats","title":"Persistent Conditional Formatting for Vectors","text":"Multiple conditions formatters can specified supplying lists functions purrr-style lambdas. Elements x conditions[[]](x) TRUE formatted using formatter function formatters[[]]. highlight_case() provides dplyr::case_when() inspired syntax defining multiple conditional formats.","code":"dummies <- vlightr::highlight(   x = c(1L, 0L, NA, 1L, 0L),   conditions = list(     is.na,      ~ .x == 1,      ~ .x == 0   ),   formatters = list(     vlightr::color(\"red\"),     ~ paste(.x, \"[Yes]\"),     ~ paste(.x, \"[No]\")   ) ) dummies #> <highlight<integer>[5]>                                                          #> [1] 1 [Yes] 0 [No]  NA      1 [Yes] 0 [No] bad_words <- c(\"darn\", \"gosh\") affirmations <- c(\"good job\", \"way-to-go\") message <- c(\"hey\", \"good job\", \"but\", \"darn\", \"please\", \"don't\", \"say\", \"gosh\")  vlightr::highlight_case(   message,   .x %in% bad_words ~ strrep(\"X\", nchar(.x)),   .x %in% affirmations ~ toupper(.x),   TRUE ~ cli::style_italic ) #> <highlight<character>[8]>                                                        #> [1] \"hey\"      \"GOOD JOB\" \"but\"      \"XXXX\"     \"please\"   \"don't\"    \"say\"      #> [8] \"XXXX\""},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"define-highlighter-functions","dir":"","previous_headings":"Features","what":"Define Highlighter Functions","title":"Persistent Conditional Formatting for Vectors","text":"Re-use formatting highlighted vector converting highlighter.","code":"dummy_highlighter <- vlightr::as_highlighter(dummies) dummy_highlighter(c(0, 1, NA)) #> <highlight<double>[3]>                                                           #> [1] 0 [No]  1 [Yes] NA"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"highlight-arbitrary-vectors","dir":"","previous_headings":"Features","what":"Highlight Arbitrary Vectors","title":"Persistent Conditional Formatting for Vectors","text":"Highlights generic, meaning S3 S4 vector classes packages highlight-able.","code":"today <- lubridate::ymd(\"2020-01-01\") meeting_times <- lubridate::interval(   today + lubridate::hours(c(9, 11, 16)),    today + lubridate::hours(c(10, 13, 17)) ) lunch_break <- lubridate::interval(   today + lubridate::hours(12),    today + lubridate::hours(13) ) is_during_lunch <- function(x) lubridate::int_overlaps(x, lunch_break)  vlightr::highlight(meeting_times, is_during_lunch, cli::col_magenta) #> <highlight<Interval>[3]>                                                         #> [1] 2020-01-01 09:00:00 UTC--2020-01-01 10:00:00 UTC                             #> [2] 2020-01-01 11:00:00 UTC--2020-01-01 13:00:00 UTC                             #> [3] 2020-01-01 16:00:00 UTC--2020-01-01 17:00:00 UTC"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"inspiration","dir":"","previous_headings":"","what":"Inspiration","title":"Persistent Conditional Formatting for Vectors","text":"package heavily inspired ivs package, implements generic right-open intervals defined pair parallel start end vectors. testament genericity ivs::iv, ill-advised perfectly legal interval vector.","code":"starts <- vlightr::highlight(-3:2, ~ .x %% 2 == 0, ~ paste(.x, \"[Even]\")) ends <- vlightr::highlight(c(-2, -1, 2, 5, 7, 8), ~ .x > 0, ~ paste0(\"+\", .x))  # A totally legitimate `iv` ivs::iv(starts, ends) #> <iv<highlight<double>>[6]>                                                       #> [1] [-3, -2 [Even])        [-2 [Even], -1)        [-1, +2 [Even])                #> [4] [0 [Even], +5)         [+1, +7)               [+2 [Even], +8 [Even]) # We can even manipulate it ivs::iv_groups(ivs::iv(starts, ends)) #> <iv<highlight<double>>[1]>                                                       #> [1] [-3, +8 [Even]) # Or highlight it... vlightr::highlight(   ivs::iv(starts, ends),    ~ (ivs::iv_end(.x) - ivs::iv_start(.x)) > vlightr::hl(1),   color(\"goldenrod\") ) #> <highlight<iv<highlight<double>>>[6]>                                            #> [1] [-3, -2 [Even])        [-2 [Even], -1)        [-1, +2 [Even])                #> [4] [0 [Even], +5)         [+1, +7)               [+2 [Even], +8 [Even])"},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a highlighted vector into a highlighter — as_highlighter","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"Convert highlighted vector x (class vlightr_highlight) highlighter function (class vlightr_highligher) applies conditional formatting x.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"","code":"as_highlighter(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"x [vlightr_highlight] highlighted vector convert highlighter (class vlightr_highlighter) function. See highlighter() details.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"highlighter function conditions, formatters, description, precedence, format_once, init_formatter, last_formatter x.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"","code":"# Highlight a vector dummy <- highlight_case(  x = c(1L, NA, 0L, 1L, NA),  .x == 0 ~ paste0(.x, \"[No]\"),  .x == 1 ~ paste0(.x, \"[Yes]\"),  is.na ~ cli::col_red,  .description = c(     \"Responded No\",     \"Responded Yes\",     \"No Response\"   ) ) print(dummy) #> <highlight<integer>[5]> #> [1] 1[Yes] NA     0[No]  1[Yes] NA     describe_highlight(dummy) #> A conditionally formatted <integer> vector with 3 conditional formats: #> 1. Responded No #> 2. Responded Yes #> 3. No Response #>  #> Element formatted using: #> • 1:  0 -> 0[No] #> • 2:  1 -> 1[Yes] #> • 3: NA -> NA  # Convert the highlighted vector into a highlighter function dummy_hlghtr <- as_highlighter(dummy) print(dummy_hlghtr(c(0L, 1L, NA, 2L))) #> <highlight<integer>[4]> #> [1] 0[No]  1[Yes] NA     2      describe_highlight(dummy_hlghtr(c(0L, 1L, NA, 2L))) #> A conditionally formatted <integer> vector with 3 conditional formats: #> 1. Responded No #> 2. Responded Yes #> 3. No Response #>  #> Element formatted using: #> • 1:  0 -> 0[No] #> • 2:  1 -> 1[Yes] #> • 3: NA -> NA"},{"path":"https://ethansansom.github.io/vlightr/reference/attr-setters.html","id":null,"dir":"Reference","previous_headings":"","what":"Set an attribute of a highlighted vector — attr-setters","title":"Set an attribute of a highlighted vector — attr-setters","text":"Overwrites conditions, formatters, description, precedence, format_once, init_formatter, last_formatter attribute existing vlighter_highlight vector validates result.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/attr-setters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set an attribute of a highlighted vector — attr-setters","text":"","code":"set_conditions(x, value, at = NULL)  set_formatters(x, value, at = NULL)  set_description(x, value, at = NULL)  set_precedence(x, value, at = NULL)  set_format_once(x, value)  set_init_formatter(x, value)  set_last_formatter(x, value)"},{"path":"https://ethansansom.github.io/vlightr/reference/attr-setters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set an attribute of a highlighted vector — attr-setters","text":"x [vlightr_highlight] highlighted vector set attribute . value set_*, attribute * wish set. example, set_conditions(), value must function, purrr-style lambda, list functions lambdas used conditions x. See highlight() specifics attribute. [logical / numeric] set_conditions(), set_formatters(), set_description(), set_precedence(), indices set new attribute. Must logical numeric vector.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/attr-setters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set an attribute of a highlighted vector — attr-setters","text":"vector x one attributes updated.","code":""},{"path":[]},{"path":"https://ethansansom.github.io/vlightr/reference/attr-setters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set an attribute of a highlighted vector — attr-setters","text":"","code":"# Let's make these affirmations into exclamations affirmations <- c(\"COOL\", \"Good stuff\", \"WOW\", \"Way to go\") exclamations <- highlight(   affirmations,   conditions = ~ toupper(.x) == .x,   formatters = ~ paste(.x, \"!\") ) print(affirmations) #> [1] \"COOL\"       \"Good stuff\" \"WOW\"        \"Way to go\"  print(exclamations) #> <highlight<character>[4]> #> [1] \"COOL !\"     \"Good stuff\" \"WOW !\"      \"Way to go\"  describe_highlight(exclamations) #> A conditionally formatted <character> vector with 1 conditional format: #> 1. Conditional Format 1 #>  #> Element formatted using: #> • 1: COOL -> COOL !  # Reset `formatters` to quiet down the exclamation instead exclamations <- set_formatters(exclamations, ~ tolower(.x)) print(exclamations) #> <highlight<character>[4]> #> [1] \"cool\"       \"Good stuff\" \"wow\"        \"Way to go\"   # Add a description exclamations <- set_description(exclamations, \"Set Uppercase to Lower\") describe_highlight(exclamations) #> A conditionally formatted <character> vector with 1 conditional format: #> 1. Set Uppercase to Lower #>  #> Element formatted using: #> • 1: COOL -> cool  # The `at` argument is useful with multiple formatters x_multi <- highlight(   c(13, 4, 6, 1),   conditions = list(     ~ .x %% 2 == 0,     ~ .x %% 2 != 0,     ~ .x > 10    ),   formatters = list(     ~ paste(.x, \"is even\"),     ~ paste(.x, \"is odd\"),     ~ paste(.x, \"is big and\")  ),  last_formatter = wrap(\"[\", \"]\") ) print(x_multi) #> <highlight<double>[4]> #> [1] [13 is odd is big and] [4 is even]            [6 is even]            #> [4] [1 is odd]              # Move the `paste(.x, \"is big and\")` formatter first x_multi <- set_precedence(x_multi, value = -1, at = 3) print(x_multi) #> <highlight<double>[4]> #> [1] [13 is big and is odd] [4 is even]            [6 is even]            #> [4] [1 is odd]"},{"path":"https://ethansansom.github.io/vlightr/reference/condition_split.html","id":null,"dir":"Reference","previous_headings":"","what":"Split a highlighted vector by conditions — condition_split","title":"Split a highlighted vector by conditions — condition_split","text":"condition_split() divides highlighted vector x groups defined attr(x, \"conditions\"). Elements x receive conditional formatting grouped together.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/condition_split.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split a highlighted vector by conditions — condition_split","text":"","code":"condition_split(x, unlit = TRUE)"},{"path":"https://ethansansom.github.io/vlightr/reference/condition_split.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split a highlighted vector by conditions — condition_split","text":"x [vlightr_highlight] highlighted vector split. unlit [logical(1)] Whether elements output list un-highlighted. Defaults TRUE.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/condition_split.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split a highlighted vector by conditions — condition_split","text":"","code":"x <- highlight(1:5)"},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlight pipe — %hl>%","title":"Highlight pipe — %hl>%","text":"wrapper around magrittr::%>% pipe un-highlights input value using un_highlight(lhs) re-highlights output value using re_highlight(..., lhs).","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlight pipe — %hl>%","text":"","code":"lhs %hl>% rhs"},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlight pipe — %hl>%","text":"lhs value, usually highlighted (class vlightr_highlight) vector. rhs function call, using magrittr::%>% semantics.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Highlight pipe — %hl>%","text":"lhs %hl>% rhs equivalent re_highlight(un_highlight(lhs) %>% rhs, lhs).","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highlight pipe — %hl>%","text":"","code":"x <- highlight(c(1L, 0L, NA, 0L), is.na, color(\"red\")) print(x) #> <highlight<integer>[4]> #> [1] 1  0  NA 0   # The following are equivalent re_highlight(as.logical(un_highlight(x)), x) #> <highlight<logical>[4]> #> [1] TRUE  FALSE NA    FALSE x |> un_highlight() |> as.logical() |> re_highlight(x) #> <highlight<logical>[4]> #> [1] TRUE  FALSE NA    FALSE x %hl>% as.logical() #> <highlight<logical>[4]> #> [1] TRUE  FALSE NA    FALSE"},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditionally format a vector — highlight","title":"Conditionally format a vector — highlight","text":"highlight() creates vector conditional format() method. highlighted vector highlight(1:5) can (limited legwork) treated exactly integer vector 1:5, different format() print() method. highlight_case() provides alternative dplyr::case_when() style syntax highlight(). Arguments (x) highlight_case() prefixed dot. hl() highlight() synonyms, hl_case() highlight_case().","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditionally format a vector — highlight","text":"","code":"highlight(   x = logical(),   conditions = list(),   formatters = list(),   description = NULL,   precedence = NULL,   format_once = FALSE,   init_formatter = NULL,   last_formatter = NULL )  hl(   x = logical(),   conditions = list(),   formatters = list(),   description = NULL,   precedence = NULL,   format_once = FALSE,   init_formatter = NULL,   last_formatter = NULL )  highlight_case(   x,   ...,   .description = NULL,   .precedence = NULL,   .format_once = TRUE,   .init_formatter = NULL,   .last_formatter = NULL )  hl_case(   x,   ...,   .description = NULL,   .precedence = NULL,   .format_once = TRUE,   .init_formatter = NULL,   .last_formatter = NULL )"},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditionally format a vector — highlight","text":"x [vector] vector highlight. Conceptually, vector collection objects size 1. x considered vector : x data.frame x bare list x otherwise vector, defined vctrs::obj_is_vector() Atomic vector types \"logical\", \"integer\", \"double\", \"complex\", \"character\", \"raw\" meet criteria. many common vector classes POSIXct, lubridate::interval, ivs::iv. conditions [function / list] Functions indicate elements x format. Can : Function, e.g. .na purrr-style lambda, e.g. ~ nchar(.x) > 0, ~ TRUE list functions lambdas, e.g. list(~ .x < mean(.x), .infinite) function conditions receive x input must return logical vector length x length 1 (case result recycled length x). Elements x conditions[[]](x) TRUE formatted using formatter function formatters[[]]. conditions formatters supplied, must length. formatters [function / list] Character manipulation functions used format x. Can : Function, e.g. cli::style_bold purrr-style lambda, e.g. ~ paste0(.x, \"!\"), ~ \"Hi\" list functions lambdas, e.g. list(~ cli::col_red, toupper) called, function formatters receive single character vector (variable length) argument. formatter must return character vector length input length 1 (case result recycled length input character). ANSI string vectors (class cli_ansi_string) also supported (see cli::ansi-styles details). formatters supplied default set formatters provided. default, formatters list cli::bg_br_yellow, cli::bg_br_green, cli::bg_br_red, cli::bg_br_cyan, cli::bg_br_magenta, cli::bg_br_blue, repeated length conditions. option vlightr.colorful_default_formatters set via options() anything TRUE, default formatters append numbered annotations \"[1]\", \"[2]\", etc. conditionally formatted elements, instead using cli::bg_* functions. description, .description [character / NULL] optional description conditional format applied function formatters. information used describe_highlight(). supplied, description must length conditions. precedence, .precedence [numeric / NULL] numeric vector indicating order apply formatters. formatter lowest corresponding precedence value evaluated first formatting. default formatters applied order supplied. supplied, precedence must length conditions. format_once, .format_once [logical(1)] TRUE FALSE value. Indicates whether element x meets multiple conditions formatted (using formatter corresponding first condition met) formatted multiple times (using corresponding formatters). format_once FALSE default highlight() TRUE default highlight_case(). init_formatter, .init_formatter [function / NULL] first function used format x. highlighted vector formatted, init_formatter(x) called prior conditionally formatting x (.e. formatters called. NULL, format(x) called instead. last_formatter, .last_formatter [function / NULL] last function called format x. last_formatter applied x conditionally formatted (.e. init_formatter formatters functions called). last_formatter receive character vector length x argument. NULL, conditionally formatted x returned formatting. ... [formula] highlighter_case(), two sided formula condition left-hand-side formatter right-hand-side. argument replaces formatters conditions arguments highlight(). -th dot supplied roughly equivalent conditions[[]] ~ formatters[[]]. left-hand-side right-hand-side formula may : Function, e.g. rlang::is_string, toupper purrr-style lambda expression, e.g. TRUE, paste(.x, \"?\") left-hand-side right-hand-side formula may call generator function (.e. function returns another function). Examples include wrap(), color(), bg(). use function, call within lambda expression instead, e.g. color(\"blue\")(.x). Examples arguments ... include: Colour NA values red: .na ~ cli::col_red Add exclamation mark: toupper(.x) == .x ~ paste0(.x, \"!\") Replace 1's 2's: .x == 1 ~ \"2\" Colour background yellow default: TRUE ~ bg(\"yellow\")(.x)","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditionally format a vector — highlight","text":"highlighted vector (class vlightr_highlight) containing data x.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditionally format a vector — highlight","text":"highlighter_case() formula syntax compatible dplyr::across() -lined formulas. particular, call :   expression .na(.x) ~ paste0('<', .x, '>') replaced .na(y) ~ paste0('<', y, '>') across(). vlightr expects case formula terms .x (y), creates invalid condition formatter function within highlighted vector (column) y. avoid behavior, either use functions (e.g. \\(x) .na(x)) within highlight_case() formula, use lambda function instead formula within across(), like :   Note issue within dplyr verbs, dplyr::summarize() dplyr::mutate(). following work expected:","code":"across(    y,    ~highlight_case(.x, is.na(.x) ~ paste0('<', .x, '>'))  ) across(    y,    \\(col) highlight_case(col, is.na(.x) ~ paste0('<', .x, '>'))  ) mutate(    y = highlight_case(y, is.na(.x) ~ paste0('<', .x, '>'))  )"},{"path":[]},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditionally format a vector — highlight","text":"","code":"# Color NA values red x <- c(1, 0, NA, 1, 0) x_hl <- highlight(x, is.na, color(\"red\")) print(x) #> [1]  1  0 NA  1  0 print(x_hl) #> <highlight<double>[5]> #> [1] 1  0  NA 1  0  describe_highlight(x_hl) #> A conditionally formatted <numeric> vector with 1 conditional format: #> 1. Conditional Format 1 #>  #> Element formatted using: #> • 1: NA -> NA  # Label indicators 1 and 0 by adding highlights to `x_hl` x_hl <- highlight(   x_hl,   conditions = list(is.na, ~ .x == 1, ~ .x == 0),   formatters = list(color(\"red\"), ~ paste(.x, \"[Yes]\"), ~ paste(.x, \"[No]\")) ) print(x_hl) #> <highlight<double>[5]> #> [1] 1 [Yes] 0 [No]  NA      1 [Yes] 0 [No]  describe_highlight(x_hl) #> A conditionally formatted <numeric> vector with 3 conditional formats: #> 1. Conditional Format 1 #> 2. Conditional Format 2 #> 3. Conditional Format 3 #>  #> Element formatted using: #> • 1: NA -> NA #> • 2:  1 -> 1 [Yes] #> • 3:  0 -> 0 [No]  # Using `dplyr::case_when` style syntax. x_hl_case <- highlight_case(   x,   is.na(.x) ~ cli::col_red,   .x == 1 ~ paste(.x, \"[Yes]\"),   .x == 0 ~ paste(.x, \"[No]\"),   .description = c(     \"Colored Red if NA\",     \"Labelled Yes if 1\",     \"Labelled No if 0\"   ) ) print(x_hl_case) #> <highlight<double>[5]> #> [1] 1 [Yes] 0 [No]  NA      1 [Yes] 0 [No]  describe_highlight(x_hl_case) #> A conditionally formatted <numeric> vector with 3 conditional formats: #> 1. Colored Red if NA #> 2. Labelled Yes if 1 #> 3. Labelled No if 0 #>  #> Element formatted using: #> • 1: NA -> NA #> • 2:  1 -> 1 [Yes] #> • 3:  0 -> 0 [No]  # Make a `highlighter` to apply the format of `x_hl_case` indicator_highlighter <- as_highlighter(x_hl_case) indicator_highlighter(c(1, 0, 1, NA, 0, 0)) #> <highlight<double>[6]> #> [1] 1 [Yes] 0 [No]  1 [Yes] NA      0 [No]  0 [No]   # Apply multiple formats to the same element x_multi <- highlight(   x = 1:6,   conditions = list(~ .x %% 2 == 0, ~ .x > 3),   formatters = list(wrap(\"<\", \">\"), wrap(\"[\", \"]\")) ) print(x_multi) #> <highlight<integer>[6]> #> [1] 1     <2>   3     [<4>] [5]   [<6>]  # Apply a single format to each element with `format_once` update_highlight(x_multi, format_once = TRUE) #> <highlight<integer>[6]> #> [1] 1   <2> 3   <4> [5] <6>  # Use an `init_formatter` to pre-format a highlight dollar <- highlight_case(   x = c(10, -1.45, 1.046, -8, NA),   is.na(.x) ~ \\(x) \"NA\",   .x > 0 ~ \\(x) paste0(\"-$\", x),   TRUE ~ \\(x) paste0(\"$\", x),   .init_formatter = \\(x) sprintf(\"%.2f\", abs(x)) ) print(dollar) #> <highlight<double>[5]> #> [1] -$10.00 $1.45   -$1.05  $8.00   NA       # Default `formatters` highlight(1:6, conditions = ~ .x %% 2 == 0) #> <highlight<integer>[6]> #> [1] 1 2 3 4 5 6 highlight(-2:2, conditions = list(~ .x > 0, ~ .x < 0)) #> <highlight<integer>[5]> #> [1] -2 -1 0  1  2   # Change the default `formatters` using `options()` opts <- options(vlightr.colorful_default_formatters = FALSE) highlight(-2:2, conditions = list(~ .x > 0, ~ .x < 0)) #> <highlight<integer>[5]> #> [1] [ -2 ][2] [ -1 ][2] 0         [ 1 ][1]  [ 2 ][1]  options(opts)"},{"path":"https://ethansansom.github.io/vlightr/reference/highlighter.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a highlight function with custom default arguments — highlighter","title":"Generate a highlight function with custom default arguments — highlighter","text":"Produces partially applied version highlight() function, specified arguments pre-filled. resulting function can used highlight vector x using default conditional format. Assuming arguments x, conditions, formatters valid, following equivalent: highlight(x = x, conditions = conditions, formatters = formatters) highlighter(conditions = conditions, formatters = formatters)(x) output function arguments highlight(). arguments conditions, formatters, description, precedence supplied highlighter function, supplied arguments appended pre-filled arguments prior highlighting. arguments format_once, init_formatter, last_formatter supplied highlighter, supplied arguments override pre-filled defaults.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlighter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a highlight function with custom default arguments — highlighter","text":"","code":"highlighter(   conditions = list(),   formatters = list(),   description = NULL,   precedence = NULL,   format_once = FALSE,   init_formatter = NULL,   last_formatter = NULL )  highlighter_case(   ...,   .description = NULL,   .precedence = NULL,   .format_once = TRUE,   .init_formatter = NULL,   .last_formatter = NULL )"},{"path":"https://ethansansom.github.io/vlightr/reference/highlighter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a highlight function with custom default arguments — highlighter","text":"conditions [function / list] Functions indicate elements x format. Can : Function, e.g. .na purrr-style lambda, e.g. ~ nchar(.x) > 0, ~ TRUE list functions lambdas, e.g. list(~ .x < mean(.x), .infinite) function conditions receive x input must return logical vector length x length 1 (case result recycled length x). Elements x conditions[[]](x) TRUE formatted using formatter function formatters[[]]. conditions formatters supplied, must length. formatters [function / list] Character manipulation functions used format x. Can : Function, e.g. cli::style_bold purrr-style lambda, e.g. ~ paste0(.x, \"!\"), ~ \"Hi\" list functions lambdas, e.g. list(~ cli::col_red, toupper) called, function formatters receive single character vector (variable length) argument. formatter must return character vector length input length 1 (case result recycled length input character). ANSI string vectors (class cli_ansi_string) also supported (see cli::ansi-styles details). formatters supplied default set formatters provided. default, formatters list cli::bg_br_yellow, cli::bg_br_green, cli::bg_br_red, cli::bg_br_cyan, cli::bg_br_magenta, cli::bg_br_blue, repeated length conditions. option vlightr.colorful_default_formatters set via options() anything TRUE, default formatters append numbered annotations \"[1]\", \"[2]\", etc. conditionally formatted elements, instead using cli::bg_* functions. description, .description [character / NULL] optional description conditional format applied function formatters. information used describe_highlight(). supplied, description must length conditions. precedence, .precedence [numeric / NULL] numeric vector indicating order apply formatters. formatter lowest corresponding precedence value evaluated first formatting. default formatters applied order supplied. supplied, precedence must length conditions. format_once, .format_once [logical(1)] TRUE FALSE value. Indicates whether element x meets multiple conditions formatted (using formatter corresponding first condition met) formatted multiple times (using corresponding formatters). format_once FALSE default highlight() TRUE default highlight_case(). init_formatter, .init_formatter [function / NULL] first function used format x. highlighted vector formatted, init_formatter(x) called prior conditionally formatting x (.e. formatters called. NULL, format(x) called instead. last_formatter, .last_formatter [function / NULL] last function called format x. last_formatter applied x conditionally formatted (.e. init_formatter formatters functions called). last_formatter receive character vector length x argument. NULL, conditionally formatted x returned formatting. ... [formula] argument replaces formatters conditions arguments highlighter(). -th dot supplied roughly equivalent conditions[[]] ~ formatters[[]]. left-hand-side right-hand-side formula may : Function, e.g. rlang::is_string, toupper purrr-style lambda expression, e.g. TRUE, paste(.x, \"?\") left-hand-side righ-hand-side formula may call generator function (.e. function returns another function). Examples include wrap(), color(), bg(). use function, call within lambda expression instead, e.g. color(\"blue\")(.x). Examples arguments ... include: Colour NA values red: .na ~ cli::col_red Add exclamation mark: toupper(.x) == .x ~ paste0(.x, \"!\") Replace 1's 2's: .x == 1 ~ \"2\" Colour background yellow default: TRUE ~ bg(\"yellow\")(.x)","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlighter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a highlight function with custom default arguments — highlighter","text":"","code":"# Mimic an existing highlighted vector dummy <- c(1L, NA, 0L, 1L, NA) dummy_hl <- highlight_case(  x = dummy,  .x == 0 ~ paste0(.x, \"[No]\"),  .x == 1 ~ paste0(.x, \"[Yes]\"),  is.na ~ cli::col_red ) dummy_hlghtr <- highlighter_case(  .x == 0 ~ paste0(.x, \"[No]\"),  .x == 1 ~ paste0(.x, \"[Yes]\"),  is.na ~ cli::col_red ) print(dummy_hl) #> <highlight<integer>[5]> #> [1] 1[Yes] NA     0[No]  1[Yes] NA     print(dummy_hlghtr(x = x)) #> Error in eval(expr, envir, enclos): object 'x' not found  # Apply a higlighter to a new vector dummy_hlghtr(c(-2L, -1L, 0L, 1L, 2L, NA)) #> <highlight<integer>[6]> #> [1] -2     -1     0[No]  1[Yes] 2      NA      # Provide additional arguments to a highlighter dummy_hlghtr(   x = c(1L, NA, 2L, 0L, 1L, NA, 2L),   conditions = ~ .x == 2,   formatters = ~ paste(.x, \"[Double Yes]\") ) #> <highlight<integer>[7]> #> [1] 1[Yes]         NA             2 [Double Yes] 0[No]          1[Yes]         #> [6] NA             2 [Double Yes]  # Override default highlighter arguments secret <- highlighter(   ~ grepl(\"^<.*>$\", .x),   ~ strrep(\"x\", nchar(.x) - 2L),   last_formatter = toupper ) message <- c(\"<A>\", \"Super\", \"<Secret>\", \"Message\") secret(message) #> <highlight<character>[4]> #> [1] \"X\"       \"SUPER\"   \"XXXXXX\"  \"MESSAGE\" secret(message, last_formatter = tolower) #> <highlight<character>[4]> #> [1] \"x\"       \"super\"   \"xxxxxx\"  \"message\""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a highlight — is_highlight","title":"Test if the object is a highlight — is_highlight","text":"function returns TRUE highlighted vectors (class vlightr_highlight) subclasses thereof, returns returns FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a highlight — is_highlight","text":"","code":"is_highlight(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a highlight — is_highlight","text":"x object test.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a highlight — is_highlight","text":"TRUE x vlightr_highlight, FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlightable.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object can be highlighted — is_highlightable","title":"Test if the object can be highlighted — is_highlightable","text":"function returns TRUE objects can highlighted (e.g. via highlight()) FALSE otherwise. object x can highlighted : x data.frame subclass thereof x bare list x otherwise vector, defined vctrs::obj_is_vector()","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlightable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object can be highlighted — is_highlightable","text":"","code":"is_highlightable(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlightable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object can be highlighted — is_highlightable","text":"x object test.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlightable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object can be highlighted — is_highlightable","text":"TRUE x can highlighted, FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlighter.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a highlighter — is_highlighter","title":"Test if the object is a highlighter — is_highlighter","text":"function returns TRUE highlighter functions (class vlightr_highlighter) subclasses thereof, returns returns FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlighter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a highlighter — is_highlighter","text":"","code":"is_highlighter(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlighter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a highlighter — is_highlighter","text":"x object test.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlighter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a highlighter — is_highlighter","text":"TRUE x vlightr_highlighter, FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ethansansom.github.io/vlightr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/re_highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore a highlighted vector's formatting — re_highlight","title":"Restore a highlighted vector's formatting — re_highlight","text":"re_highlight() adds conditional formatting highlighted vectors ... highlighted un-highlighted vector x. primary function re_highlight() restore format method highlighted vector un-highlighting intermediate operation. See Highlight, Un-Highlight, Re-Highlight section vignette(\"vlightr\") details. re_highlight(un_highlight(x_hl), x_hl) x_hl equivalent highlighted vector x_hl. re_highlight() rl() synonyms.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/re_highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore a highlighted vector's formatting — re_highlight","text":"","code":"re_highlight(x, ...)  rl(x, ...)"},{"path":"https://ethansansom.github.io/vlightr/reference/re_highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore a highlighted vector's formatting — re_highlight","text":"x [vector] vector highlight condition formatting highlights supplied .... x already highlighted vector, conditional formatting combined highlights supplied .... ... [vlighter_highlight] highlighted vector used highlight x. conditions, formatters, description, precedence, format_once, init_formatter, last_formatter ... argument appended x, x highlighted vector, supplied highlight(x, ...) otherwise. format_once attribute output vector set TRUE format_once TRUE x .... Otherwise, format_once set FALSE. init_formatter (last_formatter) taken x, defined (.e. NULL), otherwise taken first argument ... init_formatter (last_formatter) defined.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/re_highlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restore a highlighted vector's formatting — re_highlight","text":"","code":"# Restore a vector's conditional formatting after manipulating it praise <- c(\"is cool\", \"has great vibes\", \"can do anything\") names <- \"David|Aretha|Fats|Marvin|Lauryn\" praise_names <- highlight(   c(\"Marvin\", \"House\", \"Fats\", \"Soup\"),   conditions = ~ grepl(names, .x),   formatters = ~ paste(.x, rep_len(praise, length(.x))) ) print(praise_names) #> <highlight<character>[4]> #> [1] \"Marvin is cool\"       \"House\"                \"Fats has great vibes\" #> [4] \"Soup\"                  new_names <- paste(   un_highlight(praise_names),   c(\"Gaye\", \"MD\", \"Domino\", \"Salad\") ) print(new_names) #> [1] \"Marvin Gaye\" \"House MD\"    \"Fats Domino\" \"Soup Salad\"  print(re_highlight(new_names, praise_names)) #> <highlight<character>[4]> #> [1] \"Marvin Gaye is cool\"         \"House MD\"                    #> [3] \"Fats Domino has great vibes\" \"Soup Salad\"                   # Add several conditional formats to an unhighlighted vector x <- highlight(1:5, ~ .x > 3, wrap(\"[\", \"]\")) y <- highlight(1:5, ~ .x < 2, wrap(\"<\", \">\")) print(x) #> <highlight<integer>[5]> #> [1] 1   2   3   [4] [5] print(y) #> <highlight<integer>[5]> #> [1] <1> 2   3   4   5   print(re_highlight(1:5, x, y)) #> <highlight<integer>[5]> #> [1] <1> 2   3   [4] [5]  # Or add conditional formats to an already highlighted vector z <- highlight(1:5, ~ .x %% 2 == 0, wrap(\"(\", \")\")) print(z) #> <highlight<integer>[5]> #> [1] 1   (2) 3   (4) 5   print(re_highlight(z, x, y)) #> <highlight<integer>[5]> #> [1] <1>   (2)   3     [(4)] [5]    ## Restore the conditional formatting of multiple highlights positive_adjectives <- \"(amazing|great|fantastic)\" positive_phrases <- highlight(   c(\"that's amazing\", \"alright\", \"you're fantastic\"),   conditions = ~ grepl(positive_adjectives, .x),   formatters = toupper )  doubts <- \"(but|maybe)\" doubtful_phrases <- highlight(   c(\"but I can't go\", \"I'll be there\", \"maybe too fantastic\"),   conditions = ~ grepl(doubts, .x),   formatters = ~ paste0(.x, \"...\") )  # Highlights separately print(positive_phrases) #> <highlight<character>[3]> #> [1] \"THAT'S AMAZING\"   \"alright\"          \"YOU'RE FANTASTIC\" print(doubtful_phrases) #> <highlight<character>[3]> #> [1] \"but I can't go...\"      \"I'll be there\"          \"maybe too fantastic...\"  # Highlights combined paste0(ul(positive_phrases), \", \", ul(doubtful_phrases)) |>   re_highlight(positive_phrases, doubtful_phrases) #> <highlight<character>[3]> #> [1] \"THAT'S AMAZING, BUT I CAN'T GO...\"        #> [2] \"alright, I'll be there\"                   #> [3] \"YOU'RE FANTASTIC, MAYBE TOO FANTASTIC...\""},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a formatter function to style text — stylers","title":"Generate a formatter function to style text — stylers","text":"Function factors used generate new formatting functions use formatters, init_formatter, last_formatter arguments highlight functions (e.g. highlight(), highlighter()).","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a formatter function to style text — stylers","text":"","code":"bg(x)  background(x)  color(x)  colour(x)  style(x)  wrap(left = \"[\", right = \"]\")"},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a formatter function to style text — stylers","text":"x [character(1)] background() color(), color output function applies text background text character vector, specified : recognized R color name (see grDevices::colors()) cli package color (e.g. \"yellow\", \"br_blue\") 6- 8-digit hexadecimal color string (e.g. \"⁠#ff0000\") style, text effect output function adds text character vector, specified cli package style (e.g. \"bold\", \"italic\", \"underline\"). See cli::style_bold() friends recognized cli styles colors. left, right [character(1)] wrap(), prefix (left) suffix right output function pastes onto character vector. default, left \"[\" right \"]\".","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a formatter function to style text — stylers","text":"function returns styled character ANSI string vector.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a formatter function to style text — stylers","text":"","code":"color_red <- color(\"red\") color_red(1:3) #> <cli_ansi_string> #> [1] 1 #> [2] 2 #> [3] 3  background_yellow <- background(\"yellow\") background_yellow(LETTERS[1:3]) #> <cli_ansi_string> #> [1] A #> [2] B #> [3] C  style_bold <- style(\"bold\") style_bold(c(TRUE, FALSE, NA)) #> <cli_ansi_string> #> [1] TRUE  #> [2] FALSE #> [3] NA     embrace <- wrap(\"(\", \")\") embrace(c(2.2, 3.3, 4.4)) #> [1] \"(2.2)\" \"(3.3)\" \"(4.4)\""},{"path":"https://ethansansom.github.io/vlightr/reference/un_highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Unclass a highlighted vector — un_highlight","title":"Unclass a highlighted vector — un_highlight","text":"Remove conditional formatting highlighted vector, returning highlight underlying class. x highlightable vector, x un_highlight(highlight(x)) equivalent. useful expose highlighted vector's data function accept vlightr_highlight class object. ul() un_highlight() synonyms.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/un_highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unclass a highlighted vector — un_highlight","text":"","code":"un_highlight(x)  ul(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/un_highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unclass a highlighted vector — un_highlight","text":"x highlighted vector unclass. x vlightr_highlight vector, x returned .","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/un_highlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unclass a highlighted vector — un_highlight","text":"","code":"# Remove the conditional formatting of a highlighted vector x <- highlight(1:5, ~ .x > 3, wrap()) print(x) #> <highlight<integer>[5]> #> [1] 1   2   3   [4] [5] print(un_highlight(x)) #> [1] 1 2 3 4 5  # Allow a highlighted vector to be used in functions try(paste(x)) #> Error in as.character(structure(list(.data = 1:5), conditions = list(structure(function (...,  :  #>   Can't convert `x` <highlight<integer>> to <character>. paste(ul(x)) #> [1] \"1\" \"2\" \"3\" \"4\" \"5\""},{"path":"https://ethansansom.github.io/vlightr/reference/update_highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a highlighted vector's format method — update_highlight","title":"Update a highlighted vector's format method — update_highlight","text":"update_highlight() sets conditions, formatters, description, precedence, format_once, init_formatter, last_formatter attributes already highlighted vector validates result. Updated attributes must conform existing attributes. example, supplied list conditions functions must length existing formatters attribute x.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/update_highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a highlighted vector's format method — update_highlight","text":"","code":"update_highlight(   x,   conditions,   formatters,   description,   precedence,   format_once,   init_formatter,   last_formatter )"},{"path":"https://ethansansom.github.io/vlightr/reference/update_highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a highlighted vector's format method — update_highlight","text":"x [vlightr_highlight] highlighted vector update. conditions [function / list] Functions indicate elements x format. Can : Function, e.g. .na purrr-style lambda, e.g. ~ nchar(.x) > 0, ~ TRUE list functions lambdas, e.g. list(~ .x < mean(.x), .infinite) function conditions receive x input must return logical vector length x length 1 (case result recycled length x). Elements x conditions[[]](x) TRUE formatted using formatter function formatters[[]]. conditions formatters supplied, must length. formatters [function / list] Character manipulation functions used format x. Can : Function, e.g. cli::style_bold purrr-style lambda, e.g. ~ paste0(.x, \"!\"), ~ \"Hi\" list functions lambdas, e.g. list(~ cli::col_red, toupper) called, function formatters receive single character vector (variable length) argument. formatter must return character vector length input length 1 (case result recycled length input character). ANSI string vectors (class cli_ansi_string) also supported (see cli::ansi-styles details). formatters supplied default set formatters provided. default, formatters list cli::bg_br_yellow, cli::bg_br_green, cli::bg_br_red, cli::bg_br_cyan, cli::bg_br_magenta, cli::bg_br_blue, repeated length conditions. option vlightr.colorful_default_formatters set via options() anything TRUE, default formatters append numbered annotations \"[1]\", \"[2]\", etc. conditionally formatted elements, instead using cli::bg_* functions. description [character / NULL] optional description conditional format applied function formatters. information used describe_highlight(). supplied, description must length conditions. precedence [numeric / NULL] numeric vector indicating order apply formatters. formatter lowest corresponding precedence value evaluated first formatting. default formatters applied order supplied. supplied, precedence must length conditions. format_once [logical(1)] TRUE FALSE value. Indicates whether element x meets multiple conditions formatted (using formatter corresponding first condition met) formatted multiple times (using corresponding formatters). format_once FALSE default highlight() TRUE default highlight_case(). init_formatter [function / NULL] first function used format x. highlighted vector formatted, init_formatter(x) called prior conditionally formatting x (.e. formatters called. NULL, format(x) called instead. last_formatter [function / NULL] last function called format x. last_formatter applied x conditionally formatted (.e. init_formatter formatters functions called). last_formatter receive character vector length x argument. NULL, conditionally formatted x returned formatting.","code":""},{"path":[]},{"path":"https://ethansansom.github.io/vlightr/reference/update_highlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a highlighted vector's format method — update_highlight","text":"","code":"dummies <- c(1L, 0L, NA, 0L, 1L) dummies_hl <- highlight_case(   x = dummies,   .x == 0 ~ paste(.x, \"[No]\"),   .x == 1 ~ paste(.x, \"[Yes]\"),   TRUE ~ \"Don't Know\" ) print(dummies_hl) #> <highlight<integer>[5]> #> [1] 1 [Yes]    0 [No]     Don't Know 0 [No]     1 [Yes]    describe_highlight(dummies_hl) #> A conditionally formatted <integer> vector with 3 conditional formats: #> 1. Conditional Format 1 #> 2. Conditional Format 2 #> 3. Conditional Format 3 #>  #> Element formatted using: #> • 1:  0 -> 0 [No] #> • 2:  1 -> 1 [Yes] #> • 3: NA -> Don't Know  # Add a `description` and `last_formatter` dummies_hl <- update_highlight(   x = dummies_hl,   description = c(\"Set 0 to No\", \"Set 1 to Yes\", \" Otherwise, Don't Know\"),   last_formatter = background(\"bright_yellow\") ) print(dummies_hl) #> <highlight<integer>[5]> #> [1] 1 [Yes]    0 [No]     Don't Know 0 [No]     1 [Yes]    describe_highlight(dummies_hl) #> A conditionally formatted <integer> vector with 3 conditional formats: #> 1. Set 0 to No #> 2. Set 1 to Yes #> 3.  Otherwise, Don't Know #>  #> Element formatted using: #> • 1:  0 -> 0 [No] #> • 2:  1 -> 1 [Yes] #> • 3: NA -> Don't Know  # Change the `formatters` and remove the `init_formatter` update_highlight(   x = dummies_hl,   formatters = list(~ \"No\", ~ \"Yes\", color(\"red\")),   last_formatter = NULL ) #> <highlight<integer>[5]> #> [1] Yes No  NA  No  Yes"},{"path":"https://ethansansom.github.io/vlightr/reference/vlightr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"vlightr: Persistent Conditional Formatting for Vectors — vlightr-package","title":"vlightr: Persistent Conditional Formatting for Vectors — vlightr-package","text":"Provides generic vector class persistant conditional formatting. `highlight` arbitrary vector color, emphasize, otherwise reformat elements interest printed vector tibble column. Make exploratory data analysis interactive data validation easier eyes.","code":""},{"path":[]},{"path":"https://ethansansom.github.io/vlightr/reference/vlightr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vlightr: Persistent Conditional Formatting for Vectors — vlightr-package","text":"Maintainer: Ethan Sansom ethan.sansom29@gmail.com","code":""}]
