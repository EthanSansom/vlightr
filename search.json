[{"path":"https://ethansansom.github.io/vlightr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 vlightr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic Usage","title":"vlightr","text":"Highlighting makes easy identify observations vector care . Including observations tibble::tibble().","code":"library(vlightr) library(lubridate, warn.conflicts = FALSE) set.seed(1)  # Which numbers are at or above the mean? highlight(1:10, ~ .x >= mean(.x), ~ paste0(\"[\", .x, \"]\")) #> <highlight<integer>[10]> #>  [1] 1    2    3    4    5    [6]  [7]  [8]  [9]  [10] # Where are the vowels? highlight(sample(letters, 6), ~ grepl(\"(a|e|i|o|u)\", .x), toupper) #> <highlight<character>[6]> #> [1] \"y\" \"d\" \"g\" \"A\" \"b\" \"k\" # Which interval is longer than one month? highlight(   interval(ymd(\"2021-01-01\"), ymd(\"2021-01-01\") + days(c(10, 33, 5))),   ~ .x / dmonths(1) > 1,   ~ paste(\"[ M+\", .x, \" ]\") ) #> <highlight<Interval>[3]> #> [1] 2021-01-01 UTC--2021-01-11 UTC         [ M+ 2021-01-01 UTC--2021-02-03 UTC  ] #> [3] 2021-01-01 UTC--2021-01-06 UTC work_from_home <- c(TRUE, FALSE, TRUE, FALSE, TRUE)  salary <- c(1.5, 5, 12, 8, 4) * 10000  tibble::tibble(   work_from_home = work_from_home,   salary = highlight(salary, ~ .x == max(.x), ~ paste(\"[Max]\", .x)) ) #> # A tibble: 5 × 2 #>   work_from_home       salary #>   <lgl>          <hlght<dbl>> #> 1 TRUE                  15000 #> 2 FALSE                 50000 #> 3 TRUE           [Max] 120000 #> 4 FALSE                 80000 #> 5 TRUE                  40000"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"manipulating-highlighted-data","dir":"Articles","previous_headings":"Basic Usage","what":"Manipulating Highlighted Data","title":"vlightr","text":"Highlighted vectors designed introduce little friction possible, require legwork use. Attempting coerce convert vlightr_highlight another vector type result error. Highlights , however, compatible highlights. possible, highlighted vectors casting coercion rules underlying vector type. Arithmetic, comparison, math functions supported vctrs::vec_math() work box. Notice conditional formatting persistent, changing underlying data highlighted vector also change element formatted.","code":"x <- 1:6 x_above_mean <- highlight(x, ~ .x >= mean(.x), ~ paste0(\"[\", .x, \"]\"))  x #> [1] 1 2 3 4 5 6 x_above_mean #> <highlight<integer>[6]> #> [1] 1   2   3   [4] [5] [6] try(x_above_mean[[5]] <- 100L) #> Error in `[<-`(`*tmp*`, i, value = 100L) :  #>   Can't convert `value` <integer> to <highlight<integer>>. # <highlight<int>> and <highlight<int>> are compatible x_above_mean[[5]] <- hl(100L)  # <highlight<int>> and <highlight<chr>> are not try(x_above_mean[[5]] <- hl(\"100!\")) #> Error in vec_cast.vlightr_highlight.vlightr_highlight(x = x, to = to,  :  #>   Can't convert <highlight<character>> to <highlight<integer>>. x_above_mean - hl(2.0) #> <highlight<double>[6]> #> [1] -1   0    1    2    [98] 4 pmin(x_above_mean, hl(4)) #> <highlight<integer>[6]> #> [1] 1   2   [3] [4] [4] [4] sum(x_above_mean) #> <highlight<integer>[1]> #> [1] [116]"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"highlight-un-highlight-re-highlight","dir":"Articles","previous_headings":"Basic Usage","what":"Highlight, Un-Highlight, Re-Highlight","title":"vlightr","text":"default, many functions won’t know highlighted vector, resulting error. highlight can un-highlighted (converted back ’s original class) using un_highlight() function. allows highlighted vector used expected, expense ’s conditional formatting. re_highlight() function can used re-apply conditional formatting removed un_highlight(). Together, highlight(), un_highlight(), re_highlight() provide core functionality vlightr. highlight() (synonym hl()) highlights vector. un_highlight() (synonym ul()) removes vector’s highlighting (expose ’s underlying data). re_highlight() (synonym rl()) applies format existing highlighted vector another vector. functions shorthand synonyms allow highlights used almost normal vectors. “highlight-pipe” %hl>% wrapper around magrittr::%>% pipe un re-highlighting automatically. re_highlight(x, ...) accepts number highlighted vectors ... used re-highlight vector x. useful restoring conditional formatting multiple highlights used within single function. first argument re_highlight() already highlighted vector, ’s conditional formatting highlights supplied ... combined. data x used output vector.","code":"try(as.logical(x_above_mean)) #> Error in as.logical(x_above_mean) :  #>   Can't convert `x` <highlight<integer>> to <logical>. try(which.min(x_above_mean)) #> Error in which.min(x_above_mean) :  #>   'list' object cannot be coerced to type 'double' as.logical(un_highlight(x_above_mean)) #> [1] TRUE TRUE TRUE TRUE TRUE TRUE which.min(un_highlight(x_above_mean)) #> [1] 1 re_highlight(as.logical(un_highlight(x_above_mean)), x_above_mean) #> <highlight<logical>[6]> #> [1] [TRUE] [TRUE] [TRUE] [TRUE] [TRUE] [TRUE] re_highlight(which.min(un_highlight(x_above_mean)), x_above_mean) #> <highlight<integer>[1]> #> [1] [1] # Emphasize `NA` values indicators <- highlight(c(1L, 0L, NA, 1L), is.na, ~ paste(\"[\", .x, \"]\"))  indicators #> <highlight<integer>[4]> #> [1] 1      0      [ NA ] 1 un_highlight(indicators) #> [1]  1  0 NA  1 # Convert to a logical vector indicators |>   un_highlight() |>   as.logical() |>   re_highlight(indicators) #> <highlight<logical>[4]> #> [1] TRUE   FALSE  [ NA ] TRUE indicators %hl>% as.logical() #> <highlight<logical>[4]> #> [1] TRUE   FALSE  [ NA ] TRUE # Highlight phrases containing an exclamation exclamations <- \"(wow|neat|cool)\" exclaim <- highlight(   c(\"wow that's great\", \"okay\", \"what a cool dude\", \"no\"),   ~ grepl(exclamations, .x),   ~ paste0(.x, \"!\") ) exclaim #> <highlight<character>[4]> #> [1] \"wow that's great!\" \"okay\"              \"what a cool dude!\" #> [4] \"no\" # Highlight phrases containing a question questions <- \"(what|where|when)\" question <- highlight(   c(\"news\", \"neat, when is that\", \"where is he\", \"thanks\"),   ~ grepl(questions, .x),   ~ paste0(.x, \"?\") ) question #> <highlight<character>[4]> #> [1] \"news\"                \"neat, when is that?\" \"where is he?\"        #> [4] \"thanks\" # Un-Highlight, Do Something, Re-Highlight paste(ul(exclaim), ul(question)) |> rl(exclaim, question) #> <highlight<character>[4]> #> [1] \"wow that's great news!\"         \"okay neat, when is that!?\"      #> [3] \"what a cool dude where is he!?\" \"no thanks\" re_highlight(x = exclaim, question) #> <highlight<character>[4]> #> [1] \"wow that's great!\"  \"okay\"               \"what a cool dude!?\" #> [4] \"no\""},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"applying-multiple-formats","dir":"Articles","previous_headings":"Basic Usage","what":"Applying Multiple Formats","title":"vlightr","text":"Multiple conditions formatters can specified supplying lists functions purrr-style lambdas. two compatible highlights combined, conditions formatters. error occur combination multiple highlights causes conditions formatters fail. defining complex conditional formatting, highlight_case() can make relationship conditions corresponding formats clear. syntax highlight_case() inspired dplyr::case_when(). dplyr::case_when(), element x allowed match exactly one condition (first condition returns TRUE element). can change behavior using format_once (.format_once) argument, FALSE default highlight() TRUE default highlight_case().","code":"x_min_max <- highlight(   x = x,   conditions = list(     ~ .x == min(.x),      ~ .x == max(.x)   ),   formatters = list(     ~ paste0(\"(Min = \", .x, \")\"),      ~ paste0(\"(Max = \", .x, \")\")   ) ) x_min_max #> <highlight<integer>[6]> #> [1] (Min = 1) 2         3         4         5         (Max = 6) c(x_min_max[1:3], x_above_mean[2:4]) #> <highlight<integer>[6]> #> [1] (Min = 1)   2           [3]         2           [3]         (Max = [4]) # A highlighted vector with a hidden error int_hl <- highlight(   c(1L, 2L, 3L),    conditions = ~ !is.integer(.x),   formatters = \\(x) stop(\"Integers only!\") )  # This runs fine int_hl #> <highlight<integer>[3]> #> [1] 1 2 3 # This does not try(c(int_hl, hl(0.5))) #> Error in vec_cast() :  #>   Conversion produced a malformed <vlightr_highlight> vector. #> Caused by error in `format()`: #> ! <vlightr_highlight> vector has a malformed `format()` method. #> Caused by error in `attr(,\"formatters\")[[1]]`: #> ! Integers only! x_summary <- highlight_case(   x = x,   .x == min(.x) ~ \\(x) paste0(\"(Min = \", x, \")\"),   .x == quantile(.x, 0.5) ~ \\(x) paste0(\"(Mode = \", x, \")\"),   .x == max(.x) ~ \\(x) paste0(\"(Max = \", x, \")\"),   .x > quantile(.x, 0.5) ~ \\(x) paste(\"[ High\", x, \"]\"),   TRUE ~ \\(x) paste(\"[ Low\", x, \"]\") ) x_summary #> <highlight<integer>[6]> #> [1] (Min = 1)  [ Low 2 ]  [ Low 3 ]  [ High 4 ] [ High 5 ] (Max = 6) highlight_case(   x = x,   .x == min(.x) ~ \\(x) paste0(\"(Min = \", x, \")\"),   .x == max(.x) ~ \\(x) paste0(\"(Max = \", x, \")\"),   .x > quantile(.x, 0.5) ~ \\(x) paste(\"[ High\", x, \"]\"),   .format_once = FALSE ) #> <highlight<integer>[6]> #> [1] (Min = 1)          2                  3                  [ High 4 ]         #> [5] [ High 5 ]         [ High (Max = 6) ]"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"describing-conditional-formatting","dir":"Articles","previous_headings":"Basic Usage","what":"Describing Conditional Formatting","title":"vlightr","text":"’re sharing highlighted vectors others just want remember highlight’s format method , description (.description) argument highlight() (highlight_case()) especially useful. describe_highlight() called highlighted vector, description conditional formatting printed using highlight’s description attribute provide additional context. Notice example element formatted \"2. Mode Value(s)\" formatter. element x_summary exactly equal ’s mode. can verified follows: Instead re-defining highlighted vector change ’s attributes (.e. arguments highlight()), function update_highlight() can used revise existing highlight. takes arguments highlight() returns highlighted vector updated attributes. cases format_once = TRUE, one conditional format applied element highlighted vector. format_once = FALSE, however, element can formatted several formatters. case, describe_highlight() show example realized combination conditional formats. Note every element formatted using \"<P50\" formatter. x_summary originally defined using highlight_case(), final condition function always returns TRUE.","code":"# Re-define `x_summary` with a description x_summary <- highlight_case(   x = x,   .x == min(.x) ~ \\(x) paste0(\"(Min = \", x, \")\"),   .x == quantile(.x, 0.5) ~ \\(x) paste0(\"(Mode = \", x, \")\"),   .x == max(.x) ~ \\(x) paste0(\"(Max = \", x, \")\"),   .x > quantile(.x, 0.5) ~ \\(x) paste(\"[ High\", x, \"]\"),   TRUE ~ \\(x) paste(\"[ Low\", x, \"]\"),   .description = c(     \"Minimum Value(s)\",     \"Mode Value(s)\",     \"Maximum Value(s)\",     \"Value(s) above the Mode\",     \"Values(s) below the Mode\"   ) )  # Describe the conditional formatting describe_highlight(x_summary) #> [1] \"1:\" \"5:\" \"4:\" \"3:\" #> A conditionally formatted <integer> vector with 5 conditional formats: #> 1. Minimum Value(s) #> 2. Mode Value(s) #> 3. Maximum Value(s) #> 4. Value(s) above the Mode #> 5. Values(s) below the Mode #> Element formatted using: #> • 1: 1 -> (Min = 1) #> • 3: 6 -> (Max = 6) #> • 4: 4 -> [ High 4 ] #> • 5: 2 -> [ Low 2 ] # Get the `conditions` functions and `description` of `x_summary` conditions <- attr(x_summary, which = \"conditions\") description <- attr(x_summary, which = \"description\")  # Get the \"element is the mode\" condition mode_condition <- conditions[[which(description == \"Mode Value(s)\")]]  # Test whether any element of `x_summary` is the mode mode_condition(un_highlight(x_summary)) #> [1] FALSE FALSE FALSE FALSE FALSE FALSE x_summary <- update_highlight(   x_summary,   description = c(\"Min.\", \"P50\", \"Max\", \">P50\", \"<P50\") ) describe_highlight(x_summary) #> [1] \"1:\" \"5:\" \"4:\" \"3:\" #> A conditionally formatted <integer> vector with 5 conditional formats: #> 1. Min. #> 2. P50 #> 3. Max #> 4. >P50 #> 5. <P50 #> Element formatted using: #> • 1: 1 -> (Min = 1) #> • 3: 6 -> (Max = 6) #> • 4: 4 -> [ High 4 ] #> • 5: 2 -> [ Low 2 ] x_summary <- update_highlight(x_summary, format_once = FALSE) describe_highlight(x_summary) #> [1] \"1 and 5:     \" \"5:           \" \"4 and 5:     \" \"3, 4, and, 5:\" #> A conditionally formatted <integer> vector with 5 conditional formats: #> 1. Min. #> 2. P50 #> 3. Max #> 4. >P50 #> 5. <P50 #> Element formatted using: #> • 1 and 5:      1 -> [ Low (Min = 1) ] #> • 3, 4, and, 5: 6 -> [ Low [ High (Max = 6) ] ] #> • 4 and 5:      4 -> [ Low [ High 4 ] ] #> • 5:            2 -> [ Low 2 ] last_condition <- attr(x_summary, \"conditions\")[[5]] last_condition() #> [1] TRUE"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"highlighters","dir":"Articles","previous_headings":"","what":"Highlighters","title":"vlightr","text":"as_highlighter() converts conditionally formatted vector function applies conditional formatting vectors. Highlighter functions accept arguments highlight(), additional highlights can applied top existing ones. Notice use precedence argument. controls order conditional formats applied. default formatters applied order supplied. highlighter can defined scratch using highlighter() highlighter_case(). functions take arguments highlight() highlight_case() respectively, except first argument x.","code":"summary_highlighter <- as_highlighter(x_summary) summary_highlighter(1:5) #> <highlight<integer>[5]> #> [1] [ Low (Min = 1) ]          [ Low 2 ]                  #> [3] [ Low (Mode = 3) ]         [ Low [ High 4 ] ]         #> [5] [ Low [ High (Max = 5) ] ] summary_highlighter(   x = 1:5,    conditions = ~ .x > 0,    formatters = ~ paste0(\"+\", .x),    format_once = FALSE,   precedence = 0 ) #> <highlight<integer>[5]> #> [1] [ Low (Min = +1) ]          [ Low +2 ]                  #> [3] [ Low (Mode = +3) ]         [ Low [ High +4 ] ]         #> [5] [ Low [ High (Max = +5) ] ] # Check whether `x` is odd and then whether `x` is positive highlight(   x = -2:1,    conditions = list(~ .x %% 2 != 0, ~ .x > 0),   formatters = list(~ paste(.x, \"is odd\"), ~ paste(.x, \"and positive\")) ) #> <highlight<integer>[4]> #> [1] -2                    -1 is odd             0                     #> [4] 1 is odd and positive # Reverse the `precedence` highlight(   x = -2:1,    conditions = list(~ .x %% 2 != 0, ~ .x > 0),   formatters = list(~ paste(.x, \"is odd\"), ~ paste(.x, \"and positive\")),   precedence = 2:1 ) #> <highlight<integer>[4]> #> [1] -2                    -1 is odd             0                     #> [4] 1 and positive is odd secret <- highlighter(   conditions = ~ grepl(\"^<.*>$\", .x),    formatters = ~ strrep(\"x\", nchar(.x) - 2L) ) secret(c(\"This\", \"<is>\", \"a\", \"<secret>\", \"<.>\")) #> <highlight<character>[5]> #> [1] \"This\"   \"xx\"     \"a\"      \"xxxxxx\" \"x\" dollars <- highlighter_case(   is.na(.x) ~ \\(x) \"NA\",   .x < 0 ~ \\(x) paste0(\"-$\", round(abs(as.numeric(x)), digits = 2)),   .x >= 0 ~ \\(x) paste0(\"$\", round(abs(as.numeric(x)), digits = 2)) ) dollars(c(-10, 0.12, 130.0234, NA)) #> <highlight<double>[4]> #> [1] -$10    $0.12   $130.02 NA no_nas <- highlighter_case(is.na(.x) ~ \\(x) \"NO PROBLEM\") no_nas(c(TRUE, FALSE, NA)) #> <highlight<logical>[3]> #> [1] TRUE       FALSE      NO PROBLEM"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"styling","dir":"Articles","previous_headings":"","what":"Styling","title":"vlightr","text":"ANSI escape sequences, used color text cli package, also supported. code colors formatted NA values red. vlightr provides convenience functions selecting cli functions use formatters. color() colour() return cli::col_* function colors text bg() background() return cli::bg_* function colors text’s background style() returns cli::style_* function can bold, underline, italicize text among things See cli ANSI colored text information. (TODO Add link). example, NA highlight can achieved like :","code":"highlight(c(1, 0, NA), is.na, cli::col_red) #> <highlight<double>[3]> #> [1] 1  0  NA highlight(c(1, 0, NA), is.na, colour(\"red\"))"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"generic-highlighting","dir":"Articles","previous_headings":"","what":"Generic Highlighting","title":"vlightr","text":"examples lubridate ivs function is_highlightable CAN’T highlight -> data frames bare lists demonstrate use init_formatter add better default formatting, lubridate ymd_hms interval (interval(now(), now()) super long, truncate) Similarly, last_formatter applied conditional formatting added. useful limiting text width formatted highlight.","code":"long_interval <- interval(now(), now(), tzone = \"UTC\")  format_interval <- function(x) {   starts <- as.Date(int_start(x))   ends <- as.Date(int_end(x))   tzone <- attr(x, \"tzone\")      out <- paste(starts, \"-\", ends, tzone)   out[is.na(x)] <- NA   out }  highlight_interval <- highlighter(init_formatter = format_interval) highlight_interval(long_interval) #> <highlight<Interval>[1]> #> [1] 2024-06-06 - 2024-06-06 UTC truncate_formatter <- function(x, char_limit = 40) {   # Check which strings in `x` exceed the `char_limit`    x_char <- nchar(x)   above_limit <- x_char > char_limit   if (!any(above_limit)) {     return(x)   }      # Split strings above the `char_limit` into a prefix and suffix,    # leaving room to insert a \"...\" in between.   substr_size <- floor(char_limit / 2)   suffix_start <- x_char[above_limit] - substr_size + 2   x_prefix <- substr(x[above_limit], 1, substr_size - 1)   x_suffix <- substr(x[above_limit], suffix_start, x_char[above_limit])      # Truncate the too-long strings and insert a \"...\" in the middle   x[above_limit] <- paste0(x_prefix, \"...\", x_suffix)   x }  # Test the formatter truncate_formatter(c(\"this\", \"is\", \"a\", \"huuuuuuuuuge\", \"character\"), 7) #> [1] \"this\"    \"is\"      \"a\"       \"hu...ge\" \"ch...er\" # In a highlighter highlight_interval <- highlighter(   init_formatter = format_interval,   last_formatter = truncate_formatter ) highlight_interval(   long_interval,   conditions = ~ int_start(.x) > as.Date(\"2000-01-01\"),   formatters = ~ paste(.x, \"(is in the 21st Century)\") ) #> <highlight<Interval>[1]> #> [1] 2024-06-06 - 2024-0...n the 21st Century)"},{"path":"https://ethansansom.github.io/vlightr/articles/vlightr.html","id":"under-the-hood","dir":"Articles","previous_headings":"","what":"Under the Hood","title":"vlightr","text":"section meant provide intuition vlighter_highlight vectors formatted. Consider vector x_hl defined . ’ll just assume x highlight-able vector conditions, formatters, precedence, init_formatter, last_formatter valid arguments. format(x_hl) called (e.g. within print()) following psuedo-code executed. init_formatter formatter function access underlying vector data x. , conditional formatting performed conditions formatters performed init_formatter alone.","code":"x_hl <- highlight(  x = x,  conditions = conditions,  formatters = formatters,  precedence = precedence,  init_formatter = init_formatter,  last_formatter = last_formatter ) # Apply an initial format to `x`, converting `x` into a character vector. formatted <- init_formatter(x)  # Apply each format in `formatters` to the elements of `x` which meet a  # condition. Do so in the order specified by `precedence`. format_order <- order(precedence) for (i in format_order) {   condition <- conditions[[i]]   formatter <- formatters[[i]]   condition_is_met <- condition(x)   formatted[condition_is_met] <- formatter(formatted[condition_is_met]) }  # Apply the last format before returning last_formatter(formatted)"},{"path":"https://ethansansom.github.io/vlightr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":". Maintainer.","code":""},{"path":"https://ethansansom.github.io/vlightr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sansom E (2024). vlightr: Persistent Conditional Formatting Vectors. R package version 0.1.0, https://ethansansom.github.io/vlightr/, https://github.com/EthanSansom/vlightr.","code":"@Manual{,   title = {vlightr: Persistent Conditional Formatting for Vectors},   author = {Ethan Sansom},   year = {2024},   note = {R package version 0.1.0, https://ethansansom.github.io/vlightr/},   url = {https://github.com/EthanSansom/vlightr}, }"},{"path":[]},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"vlightr-1","dir":"","previous_headings":"","what":"vlightr","title":"Persistent Conditional Formatting for Vectors","text":"vlightr package conditionally formatting vectors. can highlight() vector style, colour, otherwise re-format ’s elements vector printed formatted. Highlights : Persistent, meaning highlighted vectors can manipulated (minimal legwork) maintaining custom formatting. Generic, meaning many vectors ’ll encounter wild (ex. ivs::iv, lubridate::interval, base::POSIXct) base atomic vectors (\"logical\", \"integer\", \"numeric\", \"complex\", \"character\" \"raw\") can highlighted.","code":""},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Persistent Conditional Formatting for Vectors","text":"⚠️ package still construction. ⚠️ can install development version vlightr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"EthanSansom/vlightr\")"},{"path":[]},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"conditional-formatting","dir":"","previous_headings":"","what":"Conditional Formatting","title":"Persistent Conditional Formatting for Vectors","text":"Apply custom format elements x condition returns TRUE. example, color NA values red appear tibble::tibble().","code":"x <- c(1L, 0L, NA, 1L, 0L) x_hl <- vlightr::highlight(x, is.na, vlightr::colour(\"red\")) print(x_hl) #> <highlight<integer>[5]>                                                          #> [1] 1  0  NA 1  0"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"highlight-un-highlight-re-highlight","dir":"","previous_headings":"","what":"Highlight, Un-Highlight, Re-Highlight","title":"Persistent Conditional Formatting for Vectors","text":"Highlighted vectors can’t implicitly coerced converted another vector type. use function expects highlight’s underlying type (ex. integer) first un_highlight() (AKA ul()) expose highlighted data re_highlight() (AKA rl()) re-apply conditional formatting. “highlight-pipe” %hl>% wraps magrittr::%>% automatically. Attempting convert vlighter_highlight vector another class raise error.","code":"x_hl |>   vlightr::ul() |>   as.logical() |>   vlightr::rl(x_hl) #> <highlight<logical>[5]>                                                          #> [1] TRUE  FALSE NA    TRUE  FALSE x_hl %hl>% as.logical() #> <highlight<logical>[5]>                                                          #> [1] TRUE  FALSE NA    TRUE  FALSE try(as.logical(x_hl)) #> Error in as.logical(x_hl) :                                                      #>   Can't convert `x` <highlight<integer>> to <logical>."},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"manipulate-highlighted-data","dir":"","previous_headings":"","what":"Manipulate Highlighted Data","title":"Persistent Conditional Formatting for Vectors","text":"Highlighted vectors happy cast coerced compatible highlights. shorthand hl() useful quickly highlighting vector purpose.","code":"# Arithmetic x_hl + vlightr::hl(10L) #> <highlight<integer>[5]>                                                          #> [1] 11 10 NA 11 10 # Assignment x_hl[[1]] <- vlightr::hl(NA) x_hl #> <highlight<integer>[5]>                                                          #> [1] NA 0  NA 1  0 # Coercion c(x_hl, vlightr::hl(c(-1.5, NA))) #> <highlight<double>[7]>                                                           #> [1] NA   0.0  NA   1.0  0.0  -1.5 NA"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"multiple-conditional-formats","dir":"","previous_headings":"","what":"Multiple Conditional Formats","title":"Persistent Conditional Formatting for Vectors","text":"","code":"dummies <- vlightr::highlight(   x = x,   conditions = list(     is.na,      ~ .x == 1,      ~ .x == 0   ),   formatters = list(     vlightr::colour(\"red\"),      ~ paste(.x, \"[Yes]\"),     ~ paste(.x, \"[No]\")   ) ) dummies #> <highlight<integer>[5]>                                                          #> [1] 1 [Yes] 0 [No]  NA      1 [Yes] 0 [No]"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"column-rendering-in-tibbletibble","dir":"","previous_headings":"","what":"Column Rendering in tibble::tibble()","title":"Persistent Conditional Formatting for Vectors","text":"","code":"tibble::tibble(dummy = dummies) #> # A tibble: 5 × 1                                                                #>          dummy                                                                   #>   <hlght<int>>                                                                   #> 1      1 [Yes]                                                                   #> 2       0 [No]                                                                   #> 3           NA                                                                   #> 4      1 [Yes]                                                                   #> 5       0 [No]"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"define-highlighter-functions","dir":"","previous_headings":"","what":"Define Highlighter Functions","title":"Persistent Conditional Formatting for Vectors","text":"","code":"dummy_highlighter <- vlightr::as_highlighter(dummies) dummy_highlighter(c(0, 1, NA)) #> <highlight<double>[3]>                                                           #> [1] 0 [No]  1 [Yes] NA"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"alternate-dplyrcase_when-style-syntax","dir":"","previous_headings":"","what":"Alternate dplyr::case_when() Style Syntax","title":"Persistent Conditional Formatting for Vectors","text":"","code":"bad_words <- c(\"darn\", \"gosh\") affirmations <- c(\"good job\", \"way-to-go\") message <- c(\"hey\", \"good job\", \"but\", \"darn\", \"please\", \"don't\", \"say\", \"gosh\")  vlightr::highlight_case(   message,   .x %in% bad_words ~ strrep(\"X\", nchar(.x)),   .x %in% affirmations ~ toupper(.x),   TRUE ~ cli::style_italic ) #> <highlight<character>[8]>                                                        #> [1] \"hey\"      \"GOOD JOB\" \"but\"      \"XXXX\"     \"please\"   \"don't\"    \"say\"      #> [8] \"XXXX\""},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"highlight-arbitrary-vectors","dir":"","previous_headings":"","what":"Highlight Arbitrary Vectors","title":"Persistent Conditional Formatting for Vectors","text":"Highlighted vectors generic, meaning S3 S4 vector classes packages highlight-able.","code":"library(lubridate, warn.conflicts = FALSE)  today <- ymd(\"2020-01-01\") meeting_times <- interval(   today + hours(c(9, 11, 16)),    today + hours(c(10, 13, 17)) ) lunch_break <- interval(today + hours(12), today + hours(13)) is_during_lunch <- function(x) int_overlaps(x, lunch_break)  vlightr::highlight(meeting_times, is_during_lunch, cli::col_magenta) #> <highlight<Interval>[3]>                                                         #> [1] 2020-01-01 09:00:00 UTC--2020-01-01 10:00:00 UTC                             #> [2] 2020-01-01 11:00:00 UTC--2020-01-01 13:00:00 UTC                             #> [3] 2020-01-01 16:00:00 UTC--2020-01-01 17:00:00 UTC"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"inspiration","dir":"","previous_headings":"","what":"Inspiration","title":"Persistent Conditional Formatting for Vectors","text":"package heavily inspired ivs package, implements generic right-open intervals defined pair parallel start end vectors. testament genericity ivs::iv, ill-advised perfectly legal interval vector.","code":"library(ivs)  starts <- highlight(-3:2, ~ .x %% 2 == 0, ~ paste(.x, \"[Even]\")) ends <- highlight(c(-2, -1, 2, 5, 7, 8), ~ .x > 0, ~ paste0(\"+\", .x))  # A totally legitimate `iv` ivs::iv(starts, ends) #> <iv<highlight<double>>[6]> #> [1] [-3, -2 [Even])        [-2 [Even], -1)        [-1, +2 [Even])        #> [4] [0 [Even], +5)         [+1, +7)               [+2 [Even], +8 [Even]) # We can even manipulate it ivs::iv_groups(ivs::iv(starts, ends)) #> <iv<highlight<double>>[1]> #> [1] [-3, +8 [Even]) # Or highlight it... highlight(   ivs::iv(starts, ends),    ~ (ivs::iv_end(.x) - ivs::iv_start(.x)) > hl(1),   ~ paste(\"{\", .x, \"}\") ) #> <highlight<iv<highlight<double>>>[6]> #> [1] [-3, -2 [Even])            [-2 [Even], -1)            #> [3] { [-1, +2 [Even]) }        { [0 [Even], +5) }         #> [5] { [+1, +7) }               { [+2 [Even], +8 [Even]) }"},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a highlighted vector into a highlighter — as_highlighter","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"Convert highlighted vector x (class vlightr_highlight) highlighter function (class vlightr_highligher) applies conditional formatting x.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"","code":"as_highlighter(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"x vlightr_highlight highlighted vector convert highlighter (class vlightr_highlighter) function. See highlighter() details.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"highlighter function conditions, formatters, description, precedence, format_once, init_formatter, last_formatter x.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"","code":"# Highlight a vector dummy <- highlight_case(  x = c(1L, NA, 0L, 1L, NA),  .x == 0 ~ paste0(.x, \"[No]\"),  .x == 1 ~ paste0(.x, \"[Yes]\"),  is.na ~ color(\"red\"),  .description = c(     \"Responded No\",     \"Responded Yes\",     \"No Response\"   ) ) #> Error in highlight(x = x, conditions = conditions, formatters = formatters,     description = .description, precedence = .precedence, format_once = .format_once,     init_formatter = .init_formatter, last_formatter = .last_formatter): Attempted to create a malformed <vlightr_highlight> vector of type #> <highlight<integer>>. #> ✖ Can't evaluate <vlightr_highlight> vector's `format()` method. #> Caused by error in `format()`: #> ! Formatter `attr(,\"formatters\")[[3]]` must produce a <character> vector #>   of length 1 or `length(x)`. #> ✖ Produced a <cli_ansi_style/ansi_style> object. print(dummy) #> Error in eval(expr, envir, enclos): object 'dummy' not found describe_highlight(dummy) #> Error in eval(expr, envir, enclos): object 'dummy' not found  # Convert the highlighted vector into a highlighter function dummy_hlghtr <- as_highlighter(dummy) #> Error in eval(expr, envir, enclos): object 'dummy' not found print(dummy_hlghtr(c(0L, 1L, NA, 2L))) #> Error in dummy_hlghtr(c(0L, 1L, NA, 2L)): could not find function \"dummy_hlghtr\" describe_highlight(dummy_hlghtr(c(0L, 1L, NA, 2L))) #> Error in dummy_hlghtr(c(0L, 1L, NA, 2L)): could not find function \"dummy_hlghtr\""},{"path":"https://ethansansom.github.io/vlightr/reference/attr-setters.html","id":null,"dir":"Reference","previous_headings":"","what":"Set an attribute of a highlighted vector — attr-setters","title":"Set an attribute of a highlighted vector — attr-setters","text":"Overwrites conditions, formatters, description, precedence, format_once, init_formatter, last_formatter attribute existing vlighter_highlight vector validates result.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/attr-setters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set an attribute of a highlighted vector — attr-setters","text":"","code":"set_conditions(x, value, at = NULL)  set_formatters(x, value, at = NULL)  set_description(x, value, at = NULL)  set_precedence(x, value, at = NULL)  set_format_once(x, value)  set_init_formatter(x, value)  set_last_formatter(x, value)"},{"path":"https://ethansansom.github.io/vlightr/reference/attr-setters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set an attribute of a highlighted vector — attr-setters","text":"x [vlightr_highlight] highlighted vector set attribute . value set_*, attribute * wish set. example, set_conditions(), value must function, purrr-style lambda, list functions lambdas used conditions x. See highlight() specifics attribute. [logical / numeric] set_conditions(), set_formatters(), set_description(), set_precedence(), indices set new attribute. Must logical numeric vector.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/attr-setters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set an attribute of a highlighted vector — attr-setters","text":"vector x one attributes updated.","code":""},{"path":[]},{"path":"https://ethansansom.github.io/vlightr/reference/attr-setters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set an attribute of a highlighted vector — attr-setters","text":"","code":"# Let's make these affirmations into exclamations affirmations <- c(\"COOL\", \"Good stuff\", \"WOW\", \"Way to go\") exclamations <- highlight(   affirmations,   conditions = ~ toupper(.x) == .x,   formatters = ~ paste(.x, \"!\") ) print(affirmations) #> [1] \"COOL\"       \"Good stuff\" \"WOW\"        \"Way to go\"  print(exclamations) #> <highlight<character>[4]> #> [1] \"COOL !\"     \"Good stuff\" \"WOW !\"      \"Way to go\"  describe_highlight(exclamations) #> [1] \"1:\" #> A conditionally formatted <character> vector with 1 conditional format: #> 1. Condition 1 #>  #> Element formatted using: #> • 1: COOL -> COOL !  # Reset `formatters` to quiet down the exclamation instead exclamations <- set_formatters(exclamations, ~ tolower(.x)) print(exclamations) #> <highlight<character>[4]> #> [1] \"cool\"       \"Good stuff\" \"wow\"        \"Way to go\"   # Add a description exclamations <- set_description(exclamations, \"Set Uppercase to Lower\") describe_highlight(exclamations) #> [1] \"1:\" #> A conditionally formatted <character> vector with 1 conditional format: #> 1. Set Uppercase to Lower #>  #> Element formatted using: #> • 1: COOL -> cool  # The `at` argument is useful with multiple formatters x_multi <- highlight(   c(13, 4, 6, 1),   conditions = list(     ~ .x %% 2 == 0,     ~ .x %% 2 != 0,     ~ .x > 10    ),   formatters = list(     ~ paste(.x, \"is even\"),     ~ paste(.x, \"is odd\"),     ~ paste(.x, \"is big and\")  ),  last_formatter = wrap(\"[\", \"]\") ) print(x_multi) #> <highlight<double>[4]> #> [1] [13 is odd is big and] [4 is even]            [6 is even]            #> [4] [1 is odd]              # Move the `paste(.x, \"is big and\")` formatter first x_multi <- set_precedence(x_multi, value = -1, at = 3) print(x_multi) #> <highlight<double>[4]> #> [1] [13 is big and is odd] [4 is even]            [6 is even]            #> [4] [1 is odd]"},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlight pipe — %hl>%","title":"Highlight pipe — %hl>%","text":"wrapper around magrittr::%>% pipe un-highlights input value using un_highlight(lhs) re-highlights output value using re_highlight(..., lhs).","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlight pipe — %hl>%","text":"","code":"lhs %hl>% rhs"},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlight pipe — %hl>%","text":"lhs value, usually highlighted (class vlightr_highlight) vector. rhs function call, using magrittr::%>% semantics.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Highlight pipe — %hl>%","text":"lhs %hl>% rhs equivalent re_highlight(un_highlight(lhs) %>% rhs, lhs). See magrittr::%>% details pipe used.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highlight pipe — %hl>%","text":"","code":"x <- highlight(c(1L, 0L, NA, 0L), is.na, color(\"red\")) print(x) #> <highlight<integer>[4]> #> [1] 1  0  NA 0   # The following are equivalent re_highlight(as.logical(un_highlight(x)), x) #> <highlight<logical>[4]> #> [1] TRUE  FALSE NA    FALSE x |> un_highlight() |> as.logical() |> re_highlight(x) #> <highlight<logical>[4]> #> [1] TRUE  FALSE NA    FALSE x %hl>% as.logical() #> <highlight<logical>[4]> #> [1] TRUE  FALSE NA    FALSE"},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditionally format a vector — highlight","title":"Conditionally format a vector — highlight","text":"highlight(), hl(), highlight_case() create vlighter_highlight vector conditional format() method. vlighter_highlight generic vector superclass maintains underlying data subclass changing subclass formatted printed. words, vector highlight(1:5) can (limited legwork) treated exactly integer vector 1:5, different format() print() method. highlight_case() provides alternative dplyr::case_when() style syntax highlight(), otherwise similar. Arguments (x) highlight_case() prefixed dot (.). hl() highlight() synonyms.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditionally format a vector — highlight","text":"","code":"highlight(   x = logical(),   conditions = list(),   formatters = list(),   description = NULL,   precedence = NULL,   format_once = FALSE,   init_formatter = NULL,   last_formatter = NULL )  hl(   x = logical(),   conditions = list(),   formatters = list(),   description = NULL,   precedence = NULL,   format_once = FALSE,   init_formatter = NULL,   last_formatter = NULL )  highlight_case(   x,   ...,   .description = NULL,   .precedence = NULL,   .format_once = TRUE,   .init_formatter = NULL,   .last_formatter = NULL )"},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditionally format a vector — highlight","text":"x [vector] vector highlight. Conceptually, vector collection objects size 1. x considered vector : x data.frame x bare list x otherwise vector, defined vctrs::obj_is_vector() Atomic vector types \"logical\", \"integer\", \"double\", \"complex\", \"character\", \"raw\" meet criteria. many common vector classes POSIXct, lubridate::interval, ivs::iv. conditions [function / list] Functions indicate elements x format. Can : Function, e.g. .na purrr-style lambda, e.g. ~ nchar(.x) > 0, ~ TRUE list functions lambdas, e.g. list(~ .x < mean(.x), .infinite) function conditions receive x input must return logical vector length x length 1 (case result recycled length x). Elements x conditions[[]](x) TRUE formatted using formatter function formatters[[]]. Consequently, equal number conditions formatters must supplied. formatters [function / list] Character manipulation functions used format x. Can : Function, e.g. cli::style_bold purrr-style lambda, e.g. ~ paste0(.x, \"!\"), ~ \"Hi\" list functions lambdas, e.g. list(~ cli::col_red, toupper) called, function formatters receive single character vector (variable length) argument. formatter must return character vector length input length 1 (case result recycled length input character). ANSI string vectors (class cli_ansi_string) also supported (see cli::ansi-styles details). number formatters conditions must supplied. description, .description [character / NULL] optional description format applied function formatters. information used describe_highlight(). supplied, description must length formatters conditions. precedence, .precedence [numeric / NULL] numeric vector indicating order apply formatters. formatter lowest corresponding precedence value evaluatted first formatting. default formatters applied order supplied. supplied, precedence must length formatters conditions. format_once, .format_once [logical(1)] TRUE FALSE value. Indicates whether element x meets multiple conditions formatted (using formatter corresponding first condition met) formatted multiple times (using corresponding formatters). format_once FALSE default highlight() TRUE default highlight_case(). init_formatter, .init_formatter [function / NULL] first function used format x. highlighted vector formatted, init_formatter(x) called prior conditionally formatting x (.e. formatters called. NULL, format(x) called instead. last_formatter, .last_formatter [function / NULL] last function called format x. last_formatter applied x conditionally formatted (.e. init_formatter formatters functions called). last_formatter receive character vector length x argument. NULL, conditionally formatted x returned formatting. ... [formula] highlighter_case(), two sided formula condition left-hand-side formatter right-hand-side. argument replaces formatters conditions arguments highlight(). -th dot supplied roughly equivalent conditions[[]] ~ formatters[[]]. left-hand-side right-hand-side formula may : Function, e.g. rlang::is_string, toupper purrr-style lambda expression, e.g. TRUE, paste(.x, \"?\") left-hand-side righ-hand-side formula may call generator function (.e. function returns another function). Examples include wrap(), color(), bg(). use function, call within lambda expression instead, e.g. color(\"blue\")(.x). Examples arguments ... include: Colour NA values red: .na ~ cli::col_red Add exclamation mark: toupper(.x) == .x ~ paste0(.x, \"!\") Replace 1's 2's: .x == 1 ~ \"2\" Colour background yellow default: TRUE ~ bg(\"yellow\")(.x)","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditionally format a vector — highlight","text":"highlighted vector (class vlightr_highlight) containing data x.","code":""},{"path":[]},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditionally format a vector — highlight","text":"","code":"# Color NA values red x <- c(1, 0, NA, 1, 0) x_hl <- highlight(x, is.na, color(\"red\")) print(x) #> [1]  1  0 NA  1  0 print(x_hl) #> <highlight<double>[5]> #> [1] 1  0  NA 1  0  describe_highlight(x_hl) #> [1] \"1:\" #> A conditionally formatted <numeric> vector with 1 conditional format: #> 1. Condition 1 #>  #> Element formatted using: #> • 1: NA -> NA  # Label indicators 1 and 0 by adding highlights to `x_hl` x_hl <- highlight(   x_hl,   conditions = list(~ .x == 1, ~ .x == 0),   formatters = list(~ paste(.x, \"[Yes]\"), ~ paste(.x, \"[No]\")) ) print(x_hl) #> <highlight<double>[5]> #> [1] 1 [Yes] 0 [No]  NA      1 [Yes] 0 [No]  describe_highlight(x_hl) #> [1] \"1:\" \"2:\" #> A conditionally formatted <numeric> vector with 2 conditional formats: #> 1. Condition 1 #> 2. Condition 2 #>  #> Element formatted using: #> • 1: 1 -> 1 [Yes] #> • 2: 0 -> 0 [No]  # Using `dplyr::case_when` style syntax. # The right hand side `formatters` must be explicit functions. x_hl_case <- highlight_case(   x,   is.na(.x) ~ colour(\"red\"),   .x == 1 ~ \\(x) paste(x, \"[Yes]\"),   .x == 0 ~ \\(x) paste(x, \"[No]\"),   .description = c(     \"Colored Red if NA\",     \"Labelled Yes if 1\",     \"Labelled No if 0\"   ) ) #> Error in highlight(x = x, conditions = conditions, formatters = formatters,     description = .description, precedence = .precedence, format_once = .format_once,     init_formatter = .init_formatter, last_formatter = .last_formatter): Attempted to create a malformed <vlightr_highlight> vector of type #> <highlight<double>>. #> ✖ Can't evaluate <vlightr_highlight> vector's `format()` method. #> Caused by error in `format()`: #> ! Formatter `attr(,\"formatters\")[[1]]` must produce a <character> vector #>   of length 1 or `length(x)`. #> ✖ Produced a <cli_ansi_style/ansi_style> object. print(x_hl_case) #> Error in eval(expr, envir, enclos): object 'x_hl_case' not found describe_highlight(x_hl_case) #> Error in eval(expr, envir, enclos): object 'x_hl_case' not found  # Make a `highlighter` to apply the format of `x_hl_case` indicator_highlighter <- as_highlighter(x_hl_case) #> Error in eval(expr, envir, enclos): object 'x_hl_case' not found indicator_highlighter(c(1, 0, 1, NA, 0, 0)) #> Error in indicator_highlighter(c(1, 0, 1, NA, 0, 0)): could not find function \"indicator_highlighter\"  # Apply multiple formats to the same element x_multi <- highlight(   x = 1:6,   conditions = list(~ .x %% 2 == 0, ~ .x > 3),   formatters = list(wrap(\"<\", \">\"), wrap(\"[\", \"]\")) ) print(x_multi) #> <highlight<integer>[6]> #> [1] 1     <2>   3     [<4>] [5]   [<6>]  # Apply a single format to each element with `format_once` update_highlight(x_multi, format_once = TRUE) #> <highlight<integer>[6]> #> [1] 1   <2> 3   <4> [5] <6>  # Use an `init_formatter` to pre-format a highlight dollar <- highlight_case(   x = c(10, -1.45, 1.046, -8, NA),   is.na(.x) ~ \\(x) \"NA\",   .x > 0 ~ \\(x) paste0(\"-$\", x),   TRUE ~ \\(x) paste0(\"$\", x),   .init_formatter = \\(x) sprintf(\"%.2f\", abs(x)) ) print(dollar) #> <highlight<double>[5]> #> [1] -$10.00 $1.45   -$1.05  $8.00   NA"},{"path":"https://ethansansom.github.io/vlightr/reference/highlighter.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a highlight function with custom default arguments — highlighter","title":"Generate a highlight function with custom default arguments — highlighter","text":"Produces partially applied version highlight() function, specified pre-filled arguments. resulting function can used highlight vector x default conditional format. Assuming arguments x, conditions, formatters valid, following equivalent: highlight(x = x, conditions = conditions, formatters = formatters) highlighter(conditions = conditions, formatters = formatters)(x) output function arguments highlight(). arguments conditions, formatters, description, precedence supplied highlighter function, user arguments appended pre-filled arguments prior highlighting. arguments format_once, init_formatter, last_formatter supplied highlighter, supplied arguments override pre-filled defaults.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlighter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a highlight function with custom default arguments — highlighter","text":"","code":"highlighter(   conditions = list(),   formatters = list(),   description = NULL,   precedence = NULL,   format_once = FALSE,   init_formatter = NULL,   last_formatter = NULL )  highlighter_case(   ...,   .description = NULL,   .precedence = NULL,   .format_once = TRUE,   .init_formatter = NULL,   .last_formatter = NULL )"},{"path":"https://ethansansom.github.io/vlightr/reference/highlighter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a highlight function with custom default arguments — highlighter","text":"conditions [function / list] Functions indicate elements x format. Can : Function, e.g. .na purrr-style lambda, e.g. ~ nchar(.x) > 0, ~ TRUE list functions lambdas, e.g. list(~ .x < mean(.x), .infinite) function conditions receive x input must return logical vector length x length 1 (case result recycled length x). Elements x conditions[[]](x) TRUE formatted using formatter function formatters[[]]. Consequently, equal number conditions formatters must supplied. formatters [function / list] Character manipulation functions used format x. Can : Function, e.g. cli::style_bold purrr-style lambda, e.g. ~ paste0(.x, \"!\"), ~ \"Hi\" list functions lambdas, e.g. list(~ cli::col_red, toupper) called, function formatters receive single character vector (variable length) argument. formatter must return character vector length input length 1 (case result recycled length input character). ANSI string vectors (class cli_ansi_string) also supported (see cli::ansi-styles details). number formatters conditions must supplied. description, .description [character / NULL] optional description format applied function formatters. information used describe_highlight(). supplied, description must length formatters conditions. precedence, .precedence [numeric / NULL] numeric vector indicating order apply formatters. formatter lowest corresponding precedence value evaluatted first formatting. default formatters applied order supplied. supplied, precedence must length formatters conditions. format_once, .format_once [logical(1)] TRUE FALSE value. Indicates whether element x meets multiple conditions formatted (using formatter corresponding first condition met) formatted multiple times (using corresponding formatters). format_once FALSE default highlight() TRUE default highlight_case(). init_formatter, .init_formatter [function / NULL] first function used format x. highlighted vector formatted, init_formatter(x) called prior conditionally formatting x (.e. formatters called. NULL, format(x) called instead. last_formatter, .last_formatter [function / NULL] last function called format x. last_formatter applied x conditionally formatted (.e. init_formatter formatters functions called). last_formatter receive character vector length x argument. NULL, conditionally formatted x returned formatting. ... [formula] argument replaces formatters conditions arguments highlighter(). -th dot supplied roughly equivalent conditions[[]] ~ formatters[[]]. left-hand-side right-hand-side formula may : Function, e.g. rlang::is_string, toupper purrr-style lambda expression, e.g. TRUE, paste(.x, \"?\") left-hand-side righ-hand-side formula may call generator function (.e. function returns another function). Examples include wrap(), color(), bg(). use function, call within lambda expression instead, e.g. color(\"blue\")(.x). Examples arguments ... include: Colour NA values red: .na ~ cli::col_red Add exclamation mark: toupper(.x) == .x ~ paste0(.x, \"!\") Replace 1's 2's: .x == 1 ~ \"2\" Colour background yellow default: TRUE ~ bg(\"yellow\")(.x)","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlighter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a highlight function with custom default arguments — highlighter","text":"","code":"# Mimic an existing highlighted vector dummy <- c(1L, NA, 0L, 1L, NA) dummy_hl <- highlight_case(  x = dummy,  .x == 0 ~ paste0(.x, \"[No]\"),  .x == 1 ~ paste0(.x, \"[Yes]\"),  is.na ~ color(\"red\") ) #> Error in highlight(x = x, conditions = conditions, formatters = formatters,     description = .description, precedence = .precedence, format_once = .format_once,     init_formatter = .init_formatter, last_formatter = .last_formatter): Attempted to create a malformed <vlightr_highlight> vector of type #> <highlight<integer>>. #> ✖ Can't evaluate <vlightr_highlight> vector's `format()` method. #> Caused by error in `format()`: #> ! Formatter `attr(,\"formatters\")[[3]]` must produce a <character> vector #>   of length 1 or `length(x)`. #> ✖ Produced a <cli_ansi_style/ansi_style> object. dummy_hlghtr <- highlighter_case(  .x == 0 ~ paste0(.x, \"[No]\"),  .x == 1 ~ paste0(.x, \"[Yes]\"),  is.na ~ color(\"red\") ) #> Error in eval(rlang::f_rhs(x), envir = rlang::f_env(x)): object '.x' not found print(dummy_hl) #> Error in eval(expr, envir, enclos): object 'dummy_hl' not found print(dummy_hlghtr(x = x)) #> Error in dummy_hlghtr(x = x): could not find function \"dummy_hlghtr\"  # Apply a higlighter to a new vector dummy_hlghtr(c(-2L, -1L, 0L, 1L, 2L, NA)) #> Error in dummy_hlghtr(c(-2L, -1L, 0L, 1L, 2L, NA)): could not find function \"dummy_hlghtr\"  # Provide additional arguments to a highlighter dummy_hlghtr(   x = c(1L, NA, 2L, 0L, 1L, NA, 2L),   conditions = ~ .x == 2,   formatters = ~ paste(.x, \"[Double Yes]\") ) #> Error in dummy_hlghtr(x = c(1L, NA, 2L, 0L, 1L, NA, 2L), conditions = ~.x ==     2, formatters = ~paste(.x, \"[Double Yes]\")): could not find function \"dummy_hlghtr\"  # Override default highlighter arguments secret <- highlighter(   ~ grepl(\"^<.*>$\", .x),   ~ strrep(\"x\", nchar(.x) - 2L),   last_formatter = toupper ) message <- c(\"<A>\", \"Super\", \"<Secret>\", \"Message\") secret(message) #> <highlight<character>[4]> #> [1] \"X\"       \"SUPER\"   \"XXXXXX\"  \"MESSAGE\" secret(message, last_formatter = tolower) #> <highlight<character>[4]> #> [1] \"x\"       \"super\"   \"xxxxxx\"  \"message\""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a highlight — is_highlight","title":"Test if the object is a highlight — is_highlight","text":"function returns TRUE highlighted vectors (class vlightr_highlight) subclasses thereof, returns returns FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a highlight — is_highlight","text":"","code":"is_highlight(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a highlight — is_highlight","text":"x object test.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a highlight — is_highlight","text":"TRUE x vlightr_highlight, FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlightable.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object can be highlighted — is_highlightable","title":"Test if the object can be highlighted — is_highlightable","text":"function returns TRUE objects can highlighted (e.g. via highlight()) FALSE otherwise. object x can highlighted : x data.frame subclass thereof x bare list x otherwise vector, defined vctrs::obj_is_vector()","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlightable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object can be highlighted — is_highlightable","text":"","code":"is_highlightable(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlightable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object can be highlighted — is_highlightable","text":"x object test.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlightable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object can be highlighted — is_highlightable","text":"TRUE x can highlighted, FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlighter.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a highlighter — is_highlighter","title":"Test if the object is a highlighter — is_highlighter","text":"function returns TRUE highlighter functions (class vlightr_highlighter) subclasses thereof, returns returns FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlighter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a highlighter — is_highlighter","text":"","code":"is_highlighter(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlighter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a highlighter — is_highlighter","text":"x object test.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlighter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a highlighter — is_highlighter","text":"TRUE x vlightr_highlighter, FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ethansansom.github.io/vlightr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/re_highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore a highlighted vector's formatting — re_highlight","title":"Restore a highlighted vector's formatting — re_highlight","text":"re_highlight() adds conditional formatting highlighted vectors ... highlighted un-highlighted vector x. primary function re_highlight() restore format method highlighted vector un-highlighting intermediate operation. See Highlight, Un-Highlight, Re-Highlight section vignette(\"vlightr\") details. re_highlight(un_highlight(x_hl), x_hl) x_hl equivalent highlighted vector x_hl. re_highlight() rl() synonyms.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/re_highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore a highlighted vector's formatting — re_highlight","text":"","code":"re_highlight(x, ...)  rl(x, ...)"},{"path":"https://ethansansom.github.io/vlightr/reference/re_highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore a highlighted vector's formatting — re_highlight","text":"x [vector] vector highlight condition formatting highlights supplied .... x already highlighted vector, conditional formatting combined highlights supplied .... ... [vlighter_highlight] highlighted vector used highlight x. conditions, formatters, description, precedence, format_once, init_formatter, last_formatter ... argument appended x, x highlighted vector, supplied highlight(x, ...) otherwise. format_once, init_formatter, last_formatter attributes scalar, meaning appended . format_once attribute output vector set TRUE x ... format_once TRUE. Otherwise, format_once set FALSE. init_formatter last_formatter taken x, defined (.e. NULL) x, otherwise taken first argument ... defined init_formatter (last_formatter) respectively.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/re_highlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restore a highlighted vector's formatting — re_highlight","text":"","code":"# Restore a vector's conditional formatting after manipulating it praise <- c(\"is cool\", \"has great vibes\", \"can do anything\") names <- \"David|Aretha|Fats|Marvin|Lauryn\" praise_names <- highlight(   c(\"Marvin\", \"House\", \"Fats\", \"Soup\"),   ~ grepl(names, .x),   ~ paste(.x, rep_len(praise, length(.x))) ) print(praise_names) #> <highlight<character>[4]> #> [1] \"Marvin is cool\"       \"House\"                \"Fats has great vibes\" #> [4] \"Soup\"                  new_names <- paste(   un_highlight(praise_names),   c(\"Gaye\", \"MD\", \"Domino\", \"Salad\") ) print(new_names) #> [1] \"Marvin Gaye\" \"House MD\"    \"Fats Domino\" \"Soup Salad\"  print(re_highlight(new_names, praise_names)) #> <highlight<character>[4]> #> [1] \"Marvin Gaye is cool\"         \"House MD\"                    #> [3] \"Fats Domino has great vibes\" \"Soup Salad\"                   # Add several conditional formats to an unhighlighted vector x <- highlight(1:5, ~ .x > 3, wrap(\"[\", \"]\")) y <- highlight(1:5, ~ .x < 2, wrap(\"<\", \">\")) print(x) #> <highlight<integer>[5]> #> [1] 1   2   3   [4] [5] print(y) #> <highlight<integer>[5]> #> [1] <1> 2   3   4   5   print(re_highlight(1:5, x, y)) #> <highlight<integer>[5]> #> [1] <1> 2   3   [4] [5]  # Or add conditional formats to an already highlighted vector z <- highlight(1:5, ~ .x %% 2 == 0, wrap(\"(\", \")\")) print(z) #> <highlight<integer>[5]> #> [1] 1   (2) 3   (4) 5   print(re_highlight(z, x, y)) #> <highlight<integer>[5]> #> [1] <1>   (2)   3     [(4)] [5]    # Restore the conditional formatting of multiple highlights positive_adjectives <- \"(amazing|great|fantastic)\" positive_phrases <- highlight(   c(\"that's amazing\", \"alright\", \"you're fantastic\"),   ~ grepl(positive_adjectives, .x),   toupper )  doubts <- \"(but|maybe)\" doubtful_phrases <- highlight(   c(\"but I can't go\", \"I'll be there\", \"maybe too fantastic\"),   ~ grepl(doubts, .x),   ~ paste0(.x, \"...\") )  print(positive_phrases) #> <highlight<character>[3]> #> [1] \"THAT'S AMAZING\"   \"alright\"          \"YOU'RE FANTASTIC\" print(doubtful_phrases) #> <highlight<character>[3]> #> [1] \"but I can't go...\"      \"I'll be there\"          \"maybe too fantastic...\" paste0(ul(positive_phrases), \", \", ul(doubtful_phrases)) |>   re_highlight(positive_phrases, doubtful_phrases) #> <highlight<character>[3]> #> [1] \"THAT'S AMAZING, BUT I CAN'T GO...\"        #> [2] \"alright, I'll be there\"                   #> [3] \"YOU'RE FANTASTIC, MAYBE TOO FANTASTIC...\""},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a formatter function to style text — stylers","title":"Generate a formatter function to style text — stylers","text":"vlightr provides helpers quickly generate new formatting functions use formatters, init_formatter, last_formatter arguments highlight(), highlighter(), friends.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a formatter function to style text — stylers","text":"","code":"bg(x)  background(x)  color(x)  colour(x)  make_formatter(x)  style(x)  wrap(left = \"[\", right = \"]\")  emph(wrap = TRUE, bg = TRUE, bold = TRUE)"},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a formatter function to style text — stylers","text":"x [character(1)] bg() color(). left, right [character(1)] wrap().","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a formatter function to style text — stylers","text":"function returns styled character ANSI string vector.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a formatter function to style text — stylers","text":"","code":"color_red <- color(\"red\") color_red(1:3) #> <cli_ansi_string> #> [1] 1 #> [2] 2 #> [3] 3"},{"path":"https://ethansansom.github.io/vlightr/reference/un_highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Unclass a highlighted vector — un_highlight","title":"Unclass a highlighted vector — un_highlight","text":"Remove conditional formatting highlighted vector, returning highlight underlying class. x highlightable vector, x un_highlight(highlight(x)) equivalent. useful expose highlighted vector's data function accept vlightr_highlight class object. ul() un_highlight() synonyms.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/un_highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unclass a highlighted vector — un_highlight","text":"","code":"un_highlight(x)  ul(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/un_highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unclass a highlighted vector — un_highlight","text":"x highlighted vector unclass. x vlightr_highlight vector, x returned .","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/un_highlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unclass a highlighted vector — un_highlight","text":"","code":"# Remove the conditional formatting of a highlighted vector x <- highlight(1:5, ~ .x > 3, wrap()) print(x) #> <highlight<integer>[5]> #> [1] 1   2   3   [4] [5] print(un_highlight(x)) #> [1] 1 2 3 4 5  # Allow a highlighted vector to be used in functions try(paste(x)) #> Error in as.character(structure(list(.data = 1:5), conditions = list(structure(function (...,  :  #>   Can't convert `x` <highlight<integer>> to <character>. paste(un_highlight(x)) #> [1] \"1\" \"2\" \"3\" \"4\" \"5\""},{"path":"https://ethansansom.github.io/vlightr/reference/update_highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a highlighted vector's format method — update_highlight","title":"Update a highlighted vector's format method — update_highlight","text":"update_highlight() sets conditions, formatters, description, precedence, format_once, init_formatter, last_formatter attributes already highlighted vector validates result. Updated attributes must conform existing attributes. example, supplied list conditions functions must length existing formatters attribute x.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/update_highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a highlighted vector's format method — update_highlight","text":"","code":"update_highlight(   x,   conditions = NULL,   formatters = NULL,   description = NULL,   precedence = NULL,   format_once = NULL,   init_formatter = NULL,   last_formatter = NULL )"},{"path":"https://ethansansom.github.io/vlightr/reference/update_highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a highlighted vector's format method — update_highlight","text":"x [vlightr_highlight] highlighted vector update. conditions [function / list] Functions indicate elements x format. Can : Function, e.g. .na purrr-style lambda, e.g. ~ nchar(.x) > 0, ~ TRUE list functions lambdas, e.g. list(~ .x < mean(.x), .infinite) function conditions receive x input must return logical vector length x length 1 (case result recycled length x). Elements x conditions[[]](x) TRUE formatted using formatter function formatters[[]]. Consequently, equal number conditions formatters must supplied. formatters [function / list] Character manipulation functions used format x. Can : Function, e.g. cli::style_bold purrr-style lambda, e.g. ~ paste0(.x, \"!\"), ~ \"Hi\" list functions lambdas, e.g. list(~ cli::col_red, toupper) called, function formatters receive single character vector (variable length) argument. formatter must return character vector length input length 1 (case result recycled length input character). ANSI string vectors (class cli_ansi_string) also supported (see cli::ansi-styles details). number formatters conditions must supplied. description [character / NULL] optional description format applied function formatters. information used describe_highlight(). supplied, description must length formatters conditions. precedence [numeric / NULL] numeric vector indicating order apply formatters. formatter lowest corresponding precedence value evaluatted first formatting. default formatters applied order supplied. supplied, precedence must length formatters conditions. format_once [logical(1)] TRUE FALSE value. Indicates whether element x meets multiple conditions formatted (using formatter corresponding first condition met) formatted multiple times (using corresponding formatters). format_once FALSE default highlight() TRUE default highlight_case(). init_formatter [function / NULL] first function used format x. highlighted vector formatted, init_formatter(x) called prior conditionally formatting x (.e. formatters called. NULL, format(x) called instead. last_formatter [function / NULL] last function called format x. last_formatter applied x conditionally formatted (.e. init_formatter formatters functions called). last_formatter receive character vector length x argument. NULL, conditionally formatted x returned formatting.","code":""},{"path":[]},{"path":"https://ethansansom.github.io/vlightr/reference/update_highlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a highlighted vector's format method — update_highlight","text":"","code":"dummies <- c(1L, 0L, NA, 0L, 1L) dummies_hl <- highlight_case(   x = dummies,   .x == 0 ~ paste0(.x, \"[No]\"),   .x == 1 ~ paste0(.x, \"[Yes]\"),   TRUE ~ \"Don't Know\" ) print(dummies_hl) #> <highlight<integer>[5]> #> [1] 1[Yes]     0[No]      Don't Know 0[No]      1[Yes]     describe_highlight(dummies_hl) #> [1] \"2:\" \"1:\" \"3:\" #> A conditionally formatted <integer> vector with 3 conditional formats: #> 1. Condition 1 #> 2. Condition 2 #> 3. Condition 3 #>  #> Element formatted using: #> • 1: 0 -> 0[No] #> • 2: 1 -> 1[Yes] #> • 3: NA -> Don't Know  # Add a `description` and `last_formatter` dummies_hl <- update_highlight(   x = dummies_hl,   description = c(\"Set 0 to No\", \"Set 1 to Yes\", \" Otherwise, Don't Know\"),   last_formatter = background(\"yellow\") ) print(dummies_hl) #> <highlight<integer>[5]> #> [1] 1[Yes]     0[No]      Don't Know 0[No]      1[Yes]     describe_highlight(dummies_hl) #> [1] \"2:\" \"1:\" \"3:\" #> A conditionally formatted <integer> vector with 3 conditional formats: #> 1. Set 0 to No #> 2. Set 1 to Yes #> 3.  Otherwise, Don't Know #>  #> Element formatted using: #> • 1: 0 -> 0[No] #> • 2: 1 -> 1[Yes] #> • 3: NA -> Don't Know  # Change the `formatters` update_highlight(   x = dummies_hl,   formatters = list(~ \"No\", ~ \"Yes\", ~ color(\"red\")) ) #> Error in highlight(x = get_data(x), conditions = conditions %||% get_conditions(x),     formatters = formatters %||% get_formatters(x), description = description %||%         get_description(x), precedence = precedence %||% get_precedence(x),     format_once = format_once %||% get_format_once(x), init_formatter = init_formatter %||%         get_init_formatter(x), last_formatter = last_formatter %||%         get_last_formatter(x)): Attempted to create a malformed <vlightr_highlight> vector of type #> <highlight<integer>>. #> ✖ Can't evaluate <vlightr_highlight> vector's `format()` method. #> Caused by error in `format()`: #> ! Formatter `attr(,\"formatters\")[[3]]` must produce a <character> vector #>   of length 1 or `length(get_data(x))`. #> ✖ Produced a <cli_ansi_style/ansi_style> object."},{"path":"https://ethansansom.github.io/vlightr/reference/vlightr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"vlightr: Persistent Conditional Formatting for Vectors — vlightr-package","title":"vlightr: Persistent Conditional Formatting for Vectors — vlightr-package","text":"Provides vector superclass persistant conditional formatting. `highlight` arbitrary vector color, emphasize, otherwise reformat elements interest printed easier EDA bug catching.","code":""},{"path":[]}]
