[{"path":"https://ethansansom.github.io/vlightr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 vlightr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ethansansom.github.io/vlightr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ethan Sansom. Author, maintainer.","code":""},{"path":"https://ethansansom.github.io/vlightr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sansom E (2025). vlightr: Persistent Conditional Formatting Vectors. R package version 0.1.0, https://ethansansom.github.io/vlightr/, https://github.com/EthanSansom/vlightr.","code":"@Manual{,   title = {vlightr: Persistent Conditional Formatting for Vectors},   author = {Ethan Sansom},   year = {2025},   note = {R package version 0.1.0, https://ethansansom.github.io/vlightr/},   url = {https://github.com/EthanSansom/vlightr}, }"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"vlightr","dir":"","previous_headings":"","what":"Persistent Conditional Formatting for Vectors","title":"Persistent Conditional Formatting for Vectors","text":"{vlightr} (read, “vector-highlighter”) makes easy identify elements interest vector printed console. implements <vlightr_highlight> vector superclass enhances format() print() methods generic vectors, allowing specify custom conditional formatting method (almost) vector type.","code":""},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Persistent Conditional Formatting for Vectors","text":"⚠️ package still construction. ⚠️ can install development version vlightr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"EthanSansom/vlightr\")"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Persistent Conditional Formatting for Vectors","text":"Want identify element vector? Highlight highlight(). Highlighted elements change highlighted vector changes, won’t lose . Highlighted vectors can used tibble::tibble() columns . (boss) hard time finding row ’re looking ? Use templight() temporarily highlight vector index. can apply multiple conditional formats vector using highlight_mult(). left-hand-side test function literal value want match right-hand-side formatter function. Simplify code using highligh_case(), provides dplyr::case_when() style interface conditionally formats elements using one formatter. want re-use highlight, make highlighter() friends.","code":"library(vlightr) library(dplyr, warn.conflicts = FALSE) x <- c(1, 8, 12, 4, 2) maximum_hl <- vlightr::highlight(x, .t = ~ .x == max(.x)) print(maximum_hl) #> <highlight<double>[5]> #> [1] 1  8  12 4  2 # `hl()` is shorthand for `highlight()` sort(maximum_hl + vlightr::hl(10)) #> <highlight<double>[5]> #> [1] 11 12 14 18 22 iris |>   as_tibble() |>   mutate(     species = vlightr::highlight_mult(       Species,       \"setosa\" ~ vlightr::color(\"purple\"),       \"versicolor\" ~ vlightr::color(\"violet\"),       \"virginica\" ~ vlightr::color(\"pink\")     )   ) |>   group_by(species) |>   summarize(     avg_petal_length = vlightr::highlight(mean(Petal.Length), ~ .x == max(.x)),     avg_sepal_width = vlightr::highlight(mean(Sepal.Width), ~ .x == max(.x))   ) |>   ungroup() #> # A tibble: 3 × 3 #>      species avg_petal_length avg_sepal_width #>    <hl<fct>>        <hl<dbl>>       <hl<dbl>> #> 1     setosa            1.462           3.428 #> 2 versicolor            4.260           2.770 #> 3  virginica            5.552           2.974 mtcars |>   as_tibble(rownames = \"make\") |>   mutate(across(everything(), ~ vlightr::templight(.x, make == \"Datsun 710\"))) |>   select(make, mpg, disp, vs) |>   head(5) #> # A tibble: 5 × 4 #>                make        mpg       disp         vs #>          <vlghtr_t> <vlghtr_t> <vlghtr_t> <vlghtr_t> #> 1         Mazda RX4       21.0        160          0 #> 2     Mazda RX4 Wag       21.0        160          0 #> 3        Datsun 710       22.8        108          1 #> 4    Hornet 4 Drive       21.4        258          1 #> 5 Hornet Sportabout       18.7        360          0 indicator <- vlightr::highlight_mult(     c(1, 0, 1, 0, 0, NA, 5),     is.na ~ vlightr::color(\"red\"),     0 ~ vlightr::label(\"No\"),     1 ~ vlightr::label(\"Yes\"),     !(.x %in% c(NA, 0, 1)) ~ paste(.x, \"[?]\") ) print(indicator) #> <highlight<double>[7]> #> [1] 1 [Yes] 0 [No]  1 [Yes] 0 [No]  0 [No]  NA      5 [?] indicator <- vlightr::highlight_case(     c(1, 0, 1, 0, 0, NA, 5),     is.na ~ vlightr::color(\"red\"),     0 ~ vlightr::label(\"No\"),     1 ~ vlightr::label(\"Yes\"),     vlightr::true ~ paste(.x, \"[?]\") # Provide a default formatter ) print(indicator) #> <highlight_case<double>[7]> #> [1] 1 [Yes] 0 [No]  1 [Yes] 0 [No]  0 [No]  NA      5 [?] indicator_highlighter <- vlightr::highlighter_case(     is.na ~ vlightr::color(\"red\"),     0 ~ vlightr::label(\"No\"),     1 ~ vlightr::label(\"Yes\"),     vlightr::true ~ paste(.x, \"[?]\") ) indicator_highlighter(c(0, 1, NA, -9)) #> <highlight_case<double>[4]> #> [1] 0 [No]  1 [Yes] NA      -9 [?]"},{"path":"https://ethansansom.github.io/vlightr/index.html","id":"inspiration","dir":"","previous_headings":"","what":"Inspiration","title":"Persistent Conditional Formatting for Vectors","text":"development {vlightr} relied heavily following pacakges: purrr, inspired user interface highlight() dplyr, whose case_when() inspired highlight_case() magrittr, whose %>% made highlight pipe %hl>% possible vctrs, making S3 vectors easy work usethis pkgdown, make every step R-package R-package-website development easier package also heavily inspired ivs package, (also powered vctrs) implements generic right-open intervals defined pair parallel start end vectors. testament genericity <ivs_iv>, ill-advised perfectly legal interval vector. interval vector can manipulated ’d expect. interval vector can highlighted.","code":"library(ivs)  # Prepare highlighted numeric start and end vectors starts <- vlightr::highlight(-3:2, ~ .x %% 2 == 0, ~ label(\"Even\")) ends <- vlightr::highlight(c(-2, -1, 2, 5, 7, 8), ~ .x > 0, ~ paste0(\"+\", .x))  # Make an iv() with highlighted `starts` and `ends` iv(starts, ends) #> <iv<highlight<double>>[6]> #> [1] [-3, -2 [Even])        [-2 [Even], -1)        [-1, +2 [Even]) #> [4] [0 [Even], +5)         [+1, +7)               [+2 [Even], +8 [Even]) iv_groups(iv(starts, ends)) #> <iv<highlight<double>>[1]> #> [1] [-3, +8 [Even]) vlightr::highlight(   iv(starts, ends),    ~ (iv_end(.x) - iv_start(.x)) > hl(1),   vlightr::color(\"goldenrod\") ) #> <highlight<iv<highlight<double>>>[6]> #> [1] [-3, -2 [Even])        [-2 [Even], -1)        [-1, +2 [Even]) #> [4] [0 [Even], +5)         [+1, +7)               [+2 [Even], +8 [Even])"},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a highlighted vector into a highlighter — as_highlighter","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"Convert highlighted vector x (class vlightr_highlight) highlighter function (class vlightr_highligher) applies conditional formatting x.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"","code":"as_highlighter(.x)"},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"x [vlightr_highlight] highlighted vector convert highlighter (class vlightr_highlighter) function. See highlighter() details.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"highlighter function conditions, formatters, description, precedence, format_once, init_formatter, last_formatter x.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/as_highlighter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a highlighted vector into a highlighter — as_highlighter","text":"","code":"# Highlight a vector dummy <- highlight_case(  x = c(1L, NA, 0L, 1L, NA),  .x == 0 ~ paste0(.x, \"[No]\"),  .x == 1 ~ paste0(.x, \"[Yes]\"),  is.na ~ cli::col_red,  .description = c(     \"Responded No\",     \"Responded Yes\",     \"No Response\"   ) ) #> Error in highlight_case(x = c(1L, NA, 0L, 1L, NA), .x == 0 ~ paste0(.x,     \"[No]\"), .x == 1 ~ paste0(.x, \"[Yes]\"), is.na ~ cli::col_red,     .description = c(\"Responded No\", \"Responded Yes\", \"No Response\")): `.x` must be a non-bare-list and non-dataframe vector, not a <formula> #> object. #> ℹ See `?vctrs::obj_is_vector()` for details on vectors. print(dummy) #> Error: object 'dummy' not found describe_highlight(dummy) #> Error in describe_highlight(dummy): could not find function \"describe_highlight\"  # Convert the highlighted vector into a highlighter function dummy_hlghtr <- as_highlighter(dummy) #> Error: object 'dummy' not found print(dummy_hlghtr(c(0L, 1L, NA, 2L))) #> Error in dummy_hlghtr(c(0L, 1L, NA, 2L)): could not find function \"dummy_hlghtr\" describe_highlight(dummy_hlghtr(c(0L, 1L, NA, 2L))) #> Error in describe_highlight(dummy_hlghtr(c(0L, 1L, NA, 2L))): could not find function \"describe_highlight\""},{"path":"https://ethansansom.github.io/vlightr/reference/false.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the value FALSE — false","title":"Return the value FALSE — false","text":"function always returns value FALSE.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/false.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the value FALSE — false","text":"","code":"false(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/false.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the value FALSE — false","text":"x object.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/false.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the value FALSE — false","text":"value FALSE.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/false.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the value FALSE — false","text":"","code":"# `false()` is useful for \"turning-off\" a conditional format odd_even <- highlight_mult(   1:6,   .x %% 2 == 0 ~ wrap(\"<\", \">\"),   .x %% 2 == 1 ~ wrap(\"[\", \"]\") )  # Even values are wrapped in \"<>\", odd in \"[]\" odd_even #> <highlight<integer>[6]> #> [1] [1] <2> [3] <4> [5] <6>  # Turn off the highlighting of odd values tests(odd_even)[[2]] <- false odd_even #> <highlight<integer>[6]> #> [1] 1   <2> 3   <4> 5   <6>"},{"path":"https://ethansansom.github.io/vlightr/reference/formatters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the formatter functions of a highlight or highlighter — formatters","title":"Get or set the formatter functions of a highlight or highlighter — formatters","text":"Get set formatter functions highlight highlighter","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/formatters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the formatter functions of a highlight or highlighter — formatters","text":"","code":"formatters(x)  formatters(x) <- value"},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlight pipe — %hl>%","title":"Highlight pipe — %hl>%","text":"wrapper around magrittr::%>% pipe un-highlights input value using un_highlight(lhs) re-highlights output value using re_highlight(..., lhs).","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlight pipe — %hl>%","text":"","code":"lhs %hl>% rhs"},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlight pipe — %hl>%","text":"lhs value, usually highlighted (class vlightr_highlight) vector. rhs function call, using magrittr::%>% semantics.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Highlight pipe — %hl>%","text":"lhs %hl>% rhs equivalent re_highlight(un_highlight(lhs) %>% rhs, lhs).","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/grapes-hl-greater-than-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highlight pipe — %hl>%","text":"","code":"# Make a highlighted vector x <- highlight(c(1L, 0L, NA, 0L), is.na, color(\"red\")) print(x) #> <highlight<integer>[4]> #> [1] 1  0  NA 0   # The following are equivalent re_highlight(as.logical(un_highlight(x)), x) #> <highlight<logical>[4]> #> [1] TRUE  FALSE NA    FALSE x |> un_highlight() |> as.logical() |> re_highlight(x) #> <highlight<logical>[4]> #> [1] TRUE  FALSE NA    FALSE x %hl>% as.logical() #> <highlight<logical>[4]> #> [1] TRUE  FALSE NA    FALSE"},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditionally format a vector — highlight","title":"Conditionally format a vector — highlight","text":"highlight() creates vector conditional format() print() method. function takes input vector .x, test function .t, formatter function .f. result highlight(.x, .t, .f) printed, elements .x .t returns TRUE transformed .f printed. .t .f may equal length lists functions. Elements .x .t[[]] returns true transformed using .f[[]]. Conditional formats applied highlighted vector order applied .t .f. highlight_mult() highlight_case() allow pairs functions supplied two-sided formulas .t ~ .f using dplyr::case_when() style syntax. hl() highlight() synonyms, hl_mult() highlight_mult(), hl_case() highlight_case().","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditionally format a vector — highlight","text":"","code":"highlight(   .x = logical(),   .t = getOption(\"vlightr.default_test\"),   .f = getOption(\"vlightr.default_formatter\") )  hl(   .x = logical(),   .t = getOption(\"vlightr.default_test\"),   .f = getOption(\"vlightr.default_formatter\") )  highlight_mult(.x, ...)  hl_mult(.x, ...)  highlight_case(.x, ...)  hl_case(.x, ...)"},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditionally format a vector — highlight","text":".x [vector] vector highlight. Conceptually, vector collection objects size 1. .x considered vector : .x data.frame .x bare list .x otherwise vector, defined vctrs::obj_is_vector() Atomic vector types \"logical\", \"integer\", \"double\", \"complex\", \"character\", \"raw\" meet criteria. many common vector classes POSIXct, lubridate::interval, ivs::iv. default .x empty logical vector. .t [function / list] Vectorized test functions indicate elements .x conditionally format. .t may : named function, e.g. .na anonymous function, e.g. \\(x) 0 <= x & x <= 1 purrr-style lambda, e.g. ~ nchar(.x) > 0, ~ .h == 1, ~ TRUE list functions lambdas, e.g. list(~ .x < mean(.x), .finite) function .t receive .x input must return logical vector length .x length 1 (case result recycled length .x). default .t function false() returns FALSE input. can modify default setting vlightr.default_test options(). .f [function / list] Vectorized character manipulation functions used format .x. .f may : named function, e.g. cli::style_bold anonymous function, e.g. \\(words) gsub(\"hi\", \"hey\", words) purrr-style lambda, e.g. ~ paste0(.h, \"!\"), ~ \"fizz\" list functions lambdas, e.g. list(~ cli::col_red(.x), toupper) formatter function .f receive character vector (variable length) argument. formatter must return character vector length input length 1 (case result recycled length input character). ANSI string vectors (class cli_ansi_string) also supported (see cli::ansi-styles details). default .f function [cli::bg_br_yellow()] changes background color input text bright yellow. can modify default setting vlightr.default_formatter options(). ... [formula / vlightr_highlighter] highlighter_mult() highlighter_case(), two sided formula test left-hand-side formatter right-hand-side. argument replaces .t .f arguments highlight(). ith dot ..roughly equivalent .t[[]] ~ .f[[]]. left-hand-side right-hand-side formula may : named function, e.g. .numeric, cli::style_bold anonymous function, e.g. \\(x) .nan(x), \\(x) ifelse(x == \"\", \"empty\", x) purrr-style lambda expression, e.g. paste0(.h, \"?\"), \"fizzbuzz\" Additionally, left-hand-side formula may scalar atomic object, supplied name e.g. 1, NaN, \"Hello\". shorthand test equality. example: 10 corresponds .x == 10, \"Word\" .x == \"Word\" NaN corresponds .nan(.x) NA corresponds .na(.x), NA_int_ .na(.x) & .integer(.x) one-sided formula (e.g. ~ tolower) may also supplied, case every element .x formatted using right-hand-side function (e.g. tolower). Finally, highlighter, e.g. highlighter(.na, color(\"red\")), may supplied instead formula. Every test (e.g. .t) formatter (e.g. .f) associated highlighter inserted test formatter returned vector. Examples arguments ... include: Color NA values red: .na ~ color(\"red\") Add exclamation mark: toupper(.x) == .x ~ paste0(.x, \"!\") Label number 1 \"Yes\": 1 ~ \"Yes\" Color background yellow default: ~ cli::cli_bg_yellow(.x) case highlight_case(), elements .x can conditionally formatted . element .x formatted using formatter corresponding first test returns TRUE element.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditionally format a vector — highlight","text":"vector class vlightr_highlight. highlight_case(), vector class vlightr_highlight/vlightr_highlight_case.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditionally format a vector — highlight","text":"highlighter_mult() highlight_case() formula syntax can conflict dplyr::across() -lined formulas purrr-style-lambdas. particular, following executed:   formula .na(.x) ~ color(\"red\") replaced .na(y) ~ color(\"red\") dplyr::across(). expression .na(col) converted test function highlight_mult(), object col exist environment test function, causing error (worse, difficult diagnose bug) test function called. avoid behavior, vlightr allows use .h purrr-style-lambdas. Replacing .na(.x) .na(.h), following snippet, work expected:   purrr-style-lambdas used vlightr accept symbols .x, .h, . aliases first argument.","code":"dplyr::across(col, ~highlight_mult(.x, is.na(.x) ~ color(\"red\"))) dplyr::across(y, ~highlight_mult(.x, is.na(.h) ~ color(\"red\")))"},{"path":[]},{"path":"https://ethansansom.github.io/vlightr/reference/highlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditionally format a vector — highlight","text":"","code":"# Emphasize NA values when `x_hl` is printed x <- c(1, 0, NA, 1, 0) x_hl <- highlight(x, is.na, ~paste(\"[\", .x, \"]\")) print(x) #> [1]  1  0 NA  1  0 print(x_hl) #> <highlight<double>[5]> #> [1] 1      0      [ NA ] 1      0       # Track the maximum of `values` values <- highlight(c(1, 5, 7, 3), ~ .x == max(.x), wrap(\"[\", \"]\")) print(values) #> <highlight<double>[4]> #> [1] 1   5   [7] 3   print(sort(values)) #> <highlight<double>[4]> #> [1] 1   3   5   [7] print(hl(-1) * values) #> <highlight<double>[4]> #> [1] [-1] -5   -7   -3    # Add labels to an indicator variable indicator <- highlight_mult(   c(0, 1, NA, 5),   0 ~ label(\"No\"),   1 ~ label(\"Yes\"),   is.na ~ color(\"red\"),   !(.x %in% c(0, 1, NA)) ~ label(\"?\") ) print(indicator) #> <highlight<double>[4]> #> [1] 0 [No]  1 [Yes] NA      5 [?]    # Simplify using `dplyr::case_when()` style case matching. # Elements are conditionally formatted using the first case # where the left-hand-side returns `TRUE`. indicator <- highlight_case(   c(0, 1, NA, 5),   0 ~ label(\"No\"),   1 ~ label(\"Yes\"),   is.na ~ color(\"red\"),   true ~ label(\"?\") # `true()` is a function which returns `TRUE` ) print(indicator) #> <highlight_case<double>[4]> #> [1] 0 [No]  1 [Yes] NA      5 [?]    # Make a `highlighter()` to add the formatting of `indicator` # to other vectors. indicator_highlighter <- as_highlighter(indicator) indicator_highlighter(c(1, 0, 1, NA, -9)) #> <highlight_case<double>[5]> #> [1] 1 [Yes] 0 [No]  1 [Yes] NA      -9 [?]   # A highlighter can be supplied to `highlight_mult()` or # `highlight_case()`. This is an easy way to append new # options to an existing highlighter. highlight_case(   c(1, 2, 0, NA, -9),   2 ~ label(\"Maybe\"),   indicator_highlighter ) #> <highlight_case<double>[5]> #> [1] 1 [Yes]   2 [Maybe] 0 [No]    NA        -9 [?]     # Apply multiple formats to the same element highlight_mult(   1:6,   .x %% 2 == 0 ~ wrap(\"<\", \">\"),   .x >= 3 ~ wrap(\"[\", \"]\") ) #> <highlight<integer>[6]> #> [1] 1     <2>   [3]   [<4>] [5]   [<6>]  # Apply a formatter to every element of `.x` by # supplying a one-sided formula. upper_letters <- highlight_mult(letters[1:10], ~ toupper) print(upper_letters) #> <highlight<character>[10]> #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\"  # Note that highlighting does not alter the underlying data un_highlight(upper_letters) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\"  # A one-sided formula supplied to `highlight_case()` will # format all elements, even if they have already been formatted, # over-riding the default matching behavior. highlight_case(   c(1, 1, 0),   0 ~ \"No\",   1 ~ \"Yes\",   ~ toupper # `true ~ toupper` wouldn't format any elements ) #> <highlight_case<double>[3]> #> [1] YES YES NO   # By default no formatting is applied to a highlighted vector. highlight(1:5) # No conditional formatting #> <highlight<integer>[5]> #> [1] 1 2 3 4 5  # The default formatter `.f` colors the background of the # formatted vector yellow. If you are reading this is in # an environment which doesn't support ANSI coloring, you # may not see the yellow background. highlight(1:5, ~ .x > 3) # Yellow background #> <highlight<integer>[5]> #> [1] 1 2 3 4 5  # Change the default test or formatter using `options()` opts <- options() # Save previous options options(vlightr.default_formatter = \\(x) paste(\"{\", x, \"}\")) highlight(-2:2, ~ .x < 0) #> <highlight<integer>[5]> #> [1] { -2 } { -1 } 0      1      2       options(vlightr.default_test = \\(x) x > 0) highlight(-2:2) #> <highlight<integer>[5]> #> [1] -2    -1    0     { 1 } { 2 } options(opts) # Reset previous options"},{"path":"https://ethansansom.github.io/vlightr/reference/highlight_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the test and formatter functions of a highlight or highlighter — highlight_functions","title":"Get or set the test and formatter functions of a highlight or highlighter — highlight_functions","text":"Get set test formatter functions highlight highlighter","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlight_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the test and formatter functions of a highlight or highlighter — highlight_functions","text":"","code":"highlight_functions(x, as = c(\"functions\", \"highlighters\"))  highlight_functions(x) <- value"},{"path":"https://ethansansom.github.io/vlightr/reference/highlight_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a one-sided formula to a function — highlight_lambda","title":"Convert a one-sided formula to a function — highlight_lambda","text":"Convert one-sided formula function","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlight_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a one-sided formula to a function — highlight_lambda","text":"","code":"highlight_lambda(x, x_name = rlang::caller_arg(x))"},{"path":"https://ethansansom.github.io/vlightr/reference/highlighter.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a re-usable highlight function — highlighter","title":"Generate a re-usable highlight function — highlighter","text":"Generates partially applied version highlight() function, pre-supplied tests .t formatters .f. following calls produce equivalent highlighted vectors: highlight(.x = .x, .t = .t, .f = .f) highlighter(.t = .t, .f = .f)(.x = .x) useful creating storing re-usable conditional format apply vectors. highlighter_mult() highlighter_case() (corresponding highlight_mult() hightlight_case()) allow .t .f supplied two-sided formulas .t ~ .f using dplyr::case_when() style syntax.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlighter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a re-usable highlight function — highlighter","text":"","code":"highlighter(.t, .f)  highlighter_mult(...)  highlighter_case(...)"},{"path":"https://ethansansom.github.io/vlightr/reference/highlighter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a re-usable highlight function — highlighter","text":".t [function / list] Vectorized test functions specified : named function, e.g. .na anonymous function, e.g. \\(x) 0 <= x & x <= 1 purrr-style lambda, e.g. ~ nchar(.x) > 0, ~ .h == 1, ~ TRUE list functions lambdas, e.g. list(~ .x < mean(.x), .finite) generated function, function .t receive vector .x input must return logical vector length .x length 1 (case result recycled length .x). .f [function / list] Vectorized character manipulation functions specified : named function, e.g. cli::style_bold anonymous function, e.g. \\(words) gsub(\"hi\", \"hey\", words) purrr-style lambda, e.g. ~ paste0(.h, \"!\"), ~ \"fizz\" list functions lambdas, e.g. list(~ cli::col_red(.x), toupper) generated function, formatter function .f receive character vector (variable length) argument. formatter must return character vector length input length 1 (case result recycled length input character). ... [formula / vlightr_highlighter] highlighter_mult() highlighter_case(), two sided formula test left-hand-side formatter right-hand-side. argument replaces .t .f arguments highlighter(). ith dot ..roughly equivalent .t[[]] ~ .f[[]]. See ... argument highlight() details valid arguments supply ....","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlighter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a re-usable highlight function — highlighter","text":"function class vlightr_highlighter. highlighter_case(), function class vlightr_highlighter/vlightr_highlighter_case.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/highlighter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a re-usable highlight function — highlighter","text":"","code":"# Mimic an existing highlighted vector indicator <- c(1, 0, 1, 0) indicator_hl <- highlight_mult(  indicator,  0 ~ label(\"No\"),  1 ~ label(\"Yes\") ) indicator_hltr <- highlighter_mult(  0 ~ label(\"No\"),  1 ~ label(\"Yes\") )  # These print the same result print(indicator_hl) #> <highlight<double>[4]> #> [1] 1 [Yes] 0 [No]  1 [Yes] 0 [No]  print(indicator_hltr(indicator)) #> <highlight<double>[4]> #> [1] 1 [Yes] 0 [No]  1 [Yes] 0 [No]   # You can add functionality to an existing highlighter by # providing it as an argument to `highlighter_mult()`. new_indicator_hltr <- highlighter_mult(   indicator_hltr,   5 ~ \"Maybe\",   is.na ~ \"?\" ) x <- c(0, 1, NA, 5) indicator_hltr(x) # NA and 5 are un-formatted #> <highlight<double>[4]> #> [1] 0 [No]  1 [Yes] NA      5       new_indicator_hltr(x) # NA and 5 are formatted #> <highlight<double>[4]> #> [1] 0 [No]  1 [Yes] ?       Maybe    # This is useful for composing highlighters exclaim <- highlighter(~ .x == toupper(.x), ~ paste0(.x, \"!\")) question <- highlighter(~ .x == tolower(.x), ~ paste0(.x, \"?\")) punctuate <- highlighter_mult(exclaim, question)  # `punctuate()` applies the formatting of `exclaim()` and `question()` phrases <- c(\"hi all\", \"FANTASTIC\", \"I'm Dave\") exclaim(phrases) #> <highlight<character>[3]> #> [1] \"hi all\"     \"FANTASTIC!\" \"I'm Dave\"   question(phrases) #> <highlight<character>[3]> #> [1] \"hi all?\"   \"FANTASTIC\" \"I'm Dave\"  question(punctuate) #> Error in question(punctuate): `.x` must be a non-bare-list and non-dataframe vector, not a #> <vlightr_highlighter> object. #> ℹ See `?vctrs::obj_is_vector()` for details on vectors.  # `highlighter_case()` uses the same matching behavior as # `highlight_case()`. fullstop <- highlighter(~ TRUE, ~ paste0(.x, \".\")) punctuate_mult <- highlighter_mult(punctuate, fullstop) punctuate_case <- highlighter_case(punctuate, fullstop)  # A period is added to every phrase, since the `fullstop()` # test always returns `TRUE` punctuate_mult(phrases) #> <highlight<character>[3]> #> [1] \"hi all?.\"    \"FANTASTIC!.\" \"I'm Dave.\"    # A period is only added to elements of phrase not already # matched by a previous test. punctuate_case(phrases) #> <highlight_case<character>[3]> #> [1] \"hi all?\"    \"FANTASTIC!\" \"I'm Dave.\""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a highlight — is_highlight","title":"Test if the object is a highlight — is_highlight","text":"function returns TRUE highlighted vectors (class vlightr_highlight) subclasses thereof, returns returns FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a highlight — is_highlight","text":"","code":"is_highlight(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a highlight — is_highlight","text":"x object test.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a highlight — is_highlight","text":"TRUE x vlightr_highlight, FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if the object is a highlight — is_highlight","text":"","code":"# The following are `FALSE` is_highlight(10) #> [1] FALSE  # The following are `TRUE` is_highlight(highlight(10)) #> [1] TRUE is_highlight(templight(10)) #> [1] TRUE is_highlight(highlight_case(10)) #> [1] TRUE"},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a highlight-case vector — is_highlight_case","title":"Test if the object is a highlight-case vector — is_highlight_case","text":"function returns TRUE vectors highlighted using highlight_case() templight_case() (class vlightr_highlight_case), returns FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a highlight-case vector — is_highlight_case","text":"","code":"is_highlight_case(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a highlight-case vector — is_highlight_case","text":"x object test.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a highlight-case vector — is_highlight_case","text":"TRUE x vlightr_highlight_case, FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlight_case.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if the object is a highlight-case vector — is_highlight_case","text":"","code":"# The following are `FALSE` is_highlight_case(10) #> [1] FALSE is_highlight_case(highlight(10)) #> [1] FALSE  # The following are `TRUE` is_highlight_case(highlight_case(10)) #> [1] TRUE is_highlight_case(templight_case(10)) #> Error in prepare_templight_functions(...): object 'highlighters_at' not found  # Vectors highlighted using `highlighter_case()` or # `templigher_case()` highlighter are class `vlightr_highlight_case` lighter <- highlighter_case() is_highlight_case(lighter(10)) #> [1] TRUE"},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlightable.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object can be highlighted — is_highlightable","title":"Test if the object can be highlighted — is_highlightable","text":"function returns TRUE objects can highlighted (e.g. via highlight()) FALSE otherwise. object x can highlighted : x data.frame subclass thereof x bare list x otherwise vector, defined vctrs::obj_is_vector()","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlightable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object can be highlighted — is_highlightable","text":"","code":"is_highlightable(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlightable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object can be highlighted — is_highlightable","text":"x object test.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlightable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object can be highlighted — is_highlightable","text":"TRUE x can highlighted, FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlighter.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a highlighter — is_highlighter","title":"Test if the object is a highlighter — is_highlighter","text":"function returns TRUE highlighter functions (class vlightr_highlighter) subclasses thereof, returns returns FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlighter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a highlighter — is_highlighter","text":"","code":"is_highlighter(x)  is_highlighter_case(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlighter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a highlighter — is_highlighter","text":"x object test.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_highlighter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a highlighter — is_highlighter","text":"TRUE x vlightr_highlighter, FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_templight.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a temp-light vector — is_templight","title":"Test if the object is a temp-light vector — is_templight","text":"function returns TRUE temp-lighted vectors (class vlightr_templight) subclasses thereof, returns returns FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_templight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a temp-light vector — is_templight","text":"","code":"is_templight(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/is_templight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a temp-light vector — is_templight","text":"x object test.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_templight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a temp-light vector — is_templight","text":"TRUE x vlightr_templight, FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_templight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if the object is a temp-light vector — is_templight","text":"","code":"# The following are `FALSE` is_templight(12) #> [1] FALSE is_templight(highlight(12)) #> [1] FALSE  # The following are `TRUE` is_templight(templight(12)) #> [1] TRUE is_templight(templight_case(12)) #> Error in prepare_templight_functions(...): object 'highlighters_at' not found"},{"path":"https://ethansansom.github.io/vlightr/reference/is_templight_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a temp-light-case vector — is_templight_case","title":"Test if the object is a temp-light-case vector — is_templight_case","text":"function returns TRUE vectors highlighted using templight_case() (class vlightr_templight/vlightr_highlight_case), returns FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_templight_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a temp-light-case vector — is_templight_case","text":"","code":"is_templight_case(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/is_templight_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a temp-light-case vector — is_templight_case","text":"x object test.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_templight_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a temp-light-case vector — is_templight_case","text":"TRUE x vlightr_templight/vlightr_highlight_case, FALSE otherwise.","code":""},{"path":[]},{"path":"https://ethansansom.github.io/vlightr/reference/is_templighter.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a temp-lighter function — is_templighter","title":"Test if the object is a temp-lighter function — is_templighter","text":"function returns TRUE functions created using templighter() templighter_case() (class vlightr_templighter), returns FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_templighter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a temp-lighter function — is_templighter","text":"","code":"is_templighter(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/is_templighter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a temp-lighter function — is_templighter","text":"x object test.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_templighter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a temp-lighter function — is_templighter","text":"TRUE x vlightr_templighter, FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_templighter_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if the object is a temp-lighter function — is_templighter_case","title":"Test if the object is a temp-lighter function — is_templighter_case","text":"function returns TRUE functions created using templighter_case() (class vlightr_templighter/vlightr_highlighter_case), returns FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_templighter_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if the object is a temp-lighter function — is_templighter_case","text":"","code":"is_templighter_case(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/is_templighter_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if the object is a temp-lighter function — is_templighter_case","text":"x object test.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/is_templighter_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if the object is a temp-lighter function — is_templighter_case","text":"TRUE x vlightr_templighter/vlightr_highlighter_case, FALSE otherwise.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ethansansom.github.io/vlightr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/re_highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore a highlighted vector's formatting — re_highlight","title":"Restore a highlighted vector's formatting — re_highlight","text":"re_highlight() adds conditional formatting highlighted vectors ... highlighted un-highlighted vector x. primary function re_highlight() restore format method highlighted vector un-highlighting intermediate operation. See Highlight, Un-Highlight, Re-Highlight section vignette(\"vlightr\") details. re_highlight(un_highlight(x_hl), x_hl) x_hl equivalent highlighted vector x_hl. re_highlight() rl() synonyms.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/re_highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore a highlighted vector's formatting — re_highlight","text":"","code":"re_highlight(x, ...)  rl(x, ...)"},{"path":"https://ethansansom.github.io/vlightr/reference/re_highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore a highlighted vector's formatting — re_highlight","text":"x [vector] vector highlight condition formatting highlights supplied .... x already highlighted vector, conditional formatting combined highlights supplied .... ... [vlighter_highlight] highlighted vector used highlight x.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/re_highlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restore a highlighted vector's formatting — re_highlight","text":"","code":"# TODO"},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a formatter function to style text — stylers","title":"Generate a formatter function to style text — stylers","text":"Function factories used generate new formatting functions use highlight(), highlighter(), friends.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a formatter function to style text — stylers","text":"","code":"background(x)  bg(x)  color(x)  colour(x)  style(x)  wrap(left = \"[\", right = \"]\")  label(string, left = \"[\", right = \"]\")"},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a formatter function to style text — stylers","text":"x [character(1)] background() color(), color output function applies text background text character vector, specified : recognized R color name (see grDevices::colors()) cli package color (e.g. \"yellow\", \"br_blue\") 6- 8-digit hexadecimal color string (e.g. \"#ff0000\") style, text effect output function adds text character vector, specified cli package style (e.g. \"bold\", \"italic\", \"underline\"). See cli::style_bold() friends recognized cli styles colors. left, right [character(1)] wrap(), label() prefix (left) suffix right output function pastes onto character vector. default, left \"[\" right \"]\". string [character(1)] label, label (word) output function pastes onto character vector.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a formatter function to style text — stylers","text":"function returns styled character ANSI string vector.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/stylers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a formatter function to style text — stylers","text":"","code":"color_red <- color(\"red\") color_red(1:3) #> <cli_ansi_string> #> [1] 1 #> [2] 2 #> [3] 3  background_yellow <- background(\"yellow\") background_yellow(LETTERS[1:3]) #> <cli_ansi_string> #> [1] A #> [2] B #> [3] C  style_bold <- style(\"bold\") style_bold(c(TRUE, FALSE, NA)) #> <cli_ansi_string> #> [1] TRUE  #> [2] FALSE #> [3] NA     embrace <- wrap(\"(\", \")\") embrace(c(2.2, 3.3, 4.4)) #> [1] \"(2.2)\" \"(3.3)\" \"(4.4)\"  yes <- label(\"Yes\") yes(1) #> [1] \"1 [Yes]\""},{"path":"https://ethansansom.github.io/vlightr/reference/templight.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditionally format a vector by location — templight","title":"Conditionally format a vector by location — templight","text":"templight() creates vector conditional format() print() method. function takes input vector .x, vector locations ., formatter function .f. result templight(.x, ., .f) printed, elements .x indices specified .transformed .f printed. ..f may equal length lists indexes functions. Elements .x locations .[[]] transformed using .f[[]]. Conditional formats applied highlighted vector order applied ..f. templight_mult() templight_case() allow pairs locations functions supplied two-sided formulas .~ .f using dplyr::case_when() style syntax. tl() templight() synonyms, tl_mult() templight_mult(), tl_case() templight_case().","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/templight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditionally format a vector by location — templight","text":"","code":"templight(   .x = logical(),   .at = logical(),   .f = getOption(\"vlightr.default_formatter\") )  tl(   .x = logical(),   .at = logical(),   .f = getOption(\"vlightr.default_formatter\") )  templight_mult(.x, ...)  tl_mult(.x, ...)  templight_case(.x, ...)  tl_case(.x, ...)"},{"path":"https://ethansansom.github.io/vlightr/reference/templight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditionally format a vector by location — templight","text":".x [vector] vector highlight. Conceptually, vector collection objects size 1. .x considered vector : .x data.frame .x bare list .x otherwise vector, defined vctrs::obj_is_vector() Atomic vector types \"logical\", \"integer\", \"double\", \"complex\", \"character\", \"raw\" meet criteria. many common vector classes POSIXct, lubridate::interval, ivs::iv. default .x empty logical vector. .[logical / integerish / list] Locations elements .x conditionally format, supplied logical, integer, whole-numbered (e.g. 1.0, 2.00) numeric vector. .may also list vectors. example, .= c(TRUE, FALSE, TRUE) corresponds elements 1 3 .x (exist). .= c(1, 3) .= c(1.0, 3.0). default, .empty logical vector. .f [function / list] Vectorized character manipulation functions used format .x. .f may : named function, e.g. cli::style_bold anonymous function, e.g. \\(words) gsub(\"hi\", \"hey\", words) purrr-style lambda, e.g. ~ paste0(.h, \"!\"), ~ \"fizz\" list functions lambdas, e.g. list(~ cli::col_red(.x), toupper) formatter function .f receive character vector (variable length) argument. formatter must return character vector length input length 1 (case result recycled length input character). ANSI string vectors (class cli_ansi_string) also supported (see cli::ansi-styles details). default .f function [cli::bg_br_yellow()] changes background color input text bright yellow. can modify default setting vlightr.default_formatter options(). ... [formula / vlightr_highlighter] templight_mult() templight_case(), two sided formula locations left-hand-side formatter right-hand-side. argument replaces ..f arguments templight(). ith dot ..roughly equivalent .[[]] ~ .f[[]]. left-hand-side formula may : logical vector, e.g. c(TRUE, FALSE), letters == \"r\" Numeric indices, e.g. c(1, 2, 3), (letters %% c(\"q\", \"r\")) right-hand-side formula may : named function, e.g. cli::style_hidden anonymous function, e.g. \\(x) tolower(trimws(x)) purrr-style lambda expression, e.g. paste(seq_along(.x), \"\", .x) temp-lighter, e.g. templighter(c(1, 2, 3), color(\"blue\")), may supplied instead formula, case arguments ..f temp-lighter spliced .... case templight_case(), elements .x can conditionally formatted , similar behavior dplyr::case_when().","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/templight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditionally format a vector by location — templight","text":"vector class vlightr_templight. templight_case(), vector class vlightr_templight/vlightr_highlight_case.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/templight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditionally format a vector by location — templight","text":"Vectors highlighted templight() said \"temporarily\" conditionally formatted association .elements .x likely exist temporarily. example, code creates temp-lighted vector minimum_tl conditionally formats minimum element x.   vector minimum_tl altered, sorting example, conditionally formatted element longer minimum value x, whatever happens third element temp-lighted vector.   contrast vectors created using highlight(), maintain association specific elements data x conditional format .f.","code":"x <- c(4, 3, 0, 2, 1) minimum_tl <- templight(x, .at = x == min(x), .f = wrap(\"<\", \">\")) print(minimum_tl) # 4 3 <0> 2 1 print(sort(minimum_tl)) # 0 1 <2> 3 4 # Highlight the minimum element of `x` (i.e. 0) minimum_hl <- highlight(x, .t = ~ .x == min(.x), .f = wrap(\"<\", \">\"))  # The minimum element of `x` is still highlighted after sorting print(sort(minimum_hl)) # <0> 1 2 3 4"},{"path":[]},{"path":"https://ethansansom.github.io/vlightr/reference/templight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditionally format a vector by location — templight","text":"","code":"# TODO"},{"path":"https://ethansansom.github.io/vlightr/reference/templighter.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a temporary highlighter — templighter","title":"Make a temporary highlighter — templighter","text":"Makes temporary highlighter.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/templighter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a temporary highlighter — templighter","text":"","code":"templighter(.t, .at)  templighter_mult(...)  templighter_case(...)"},{"path":"https://ethansansom.github.io/vlightr/reference/tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or set the test functions of a highlight or highlighter — tests","title":"Get or set the test functions of a highlight or highlighter — tests","text":"Get set test functions highlight highlighter","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or set the test functions of a highlight or highlighter — tests","text":"","code":"tests(x)  tests(x) <- value"},{"path":"https://ethansansom.github.io/vlightr/reference/true.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the value TRUE — true","title":"Return the value TRUE — true","text":"function always returns value TRUE.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/true.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the value TRUE — true","text":"","code":"true(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/true.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the value TRUE — true","text":"x object.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/true.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the value TRUE — true","text":"value TRUE.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/true.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the value TRUE — true","text":"","code":"# `true()` is useful for supplying a default formatter # to `highlight_case()`. levels <- highlight_case(   1:5,   1 ~ label(\"Low\"),   2 ~ label(\"Mid\"),   3 ~ label(\"High\"),   true ~ label(\"?\") # Label any value not in 1, 2, 3 ) print(levels) #> <highlight_case<integer>[5]> #> [1] 1 [Low]  2 [Mid]  3 [High] 4 [?]    5 [?]"},{"path":"https://ethansansom.github.io/vlightr/reference/un_highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Unclass a highlighted vector — un_highlight","title":"Unclass a highlighted vector — un_highlight","text":"Remove conditional formatting highlighted vector, returning highlight underlying class. x highlightable vector, x un_highlight(highlight(x)) equivalent. useful expose highlighted vector's data function accept vlightr_highlight class object. ul() un_highlight() synonyms.","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/un_highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unclass a highlighted vector — un_highlight","text":"","code":"un_highlight(x)  ul(x)"},{"path":"https://ethansansom.github.io/vlightr/reference/un_highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unclass a highlighted vector — un_highlight","text":"x highlighted vector unclass. x vlightr_highlight vector, x returned .","code":""},{"path":"https://ethansansom.github.io/vlightr/reference/un_highlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unclass a highlighted vector — un_highlight","text":"","code":"# Remove the conditional formatting of a highlighted vector x <- highlight(1:5, ~ .x > 3, wrap()) print(x) #> <highlight<integer>[5]> #> [1] 1   2   3   [4] [5] print(un_highlight(x)) #> [1] 1 2 3 4 5  # Allow a highlighted vector to be used in functions try(paste(x)) #> Error in as.character(structure(list(.data = 1:5), tests = list(structure(function (...,  :  #>   Can't convert `x` <highlight<integer>> to <character>. paste(ul(x)) #> [1] \"1\" \"2\" \"3\" \"4\" \"5\""},{"path":"https://ethansansom.github.io/vlightr/reference/vlightr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"vlightr: Persistent Conditional Formatting for Vectors — vlightr-package","title":"vlightr: Persistent Conditional Formatting for Vectors — vlightr-package","text":"Provides generic vector class persistant conditional formatting. `highlight` arbitrary vector color, emphasize, otherwise reformat elements interest printed vector tibble column. Make exploratory data analysis interactive data validation easier eyes.","code":""},{"path":[]},{"path":"https://ethansansom.github.io/vlightr/reference/vlightr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"vlightr: Persistent Conditional Formatting for Vectors — vlightr-package","text":"Maintainer: Ethan Sansom ethan.sansom29@gmail.com","code":""}]
