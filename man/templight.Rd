% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/templight.R
\name{templight}
\alias{templight}
\alias{tl}
\alias{templight_mult}
\alias{tl_mult}
\alias{templight_case}
\alias{tl_case}
\title{Conditionally format a vector by location}
\usage{
templight(
  .x = logical(),
  .at = logical(),
  .f = getOption("vlightr.default_formatter")
)

tl(
  .x = logical(),
  .at = logical(),
  .f = getOption("vlightr.default_formatter")
)

templight_mult(.x, ...)

tl_mult(.x, ...)

templight_case(.x, ...)

tl_case(.x, ...)
}
\arguments{
\item{.x}{\verb{[vector]}

A vector to highlight. Conceptually, a vector is a collection of objects of
size 1.

\code{.x} is considered a vector if:
\itemize{
\item \code{.x} is not a \link{data.frame}
\item \code{.x} is not a bare \link{list}
\item \code{.x} is otherwise a vector, as defined by \code{\link[vctrs:vector-checks]{vctrs::obj_is_vector()}}
}

Atomic vector types \code{"logical"}, \code{"integer"}, \code{"double"}, \code{"complex"},
\code{"character"}, and \code{"raw"} meet these criteria. As do many common vector
classes such as \code{POSIXct}, \code{lubridate::interval}, or \code{ivs::iv}.

By default \code{.x} is an empty logical vector.}

\item{.at}{\verb{[logical / integerish / list]}

Locations of elements in \code{.x} to conditionally format, supplied as a logical,
integer, or whole-numbered (e.g. \code{1.0}, \code{2.00}) numeric vector. \code{.at} may
also be a list of such vectors.

For example, \code{.at = c(TRUE, FALSE, TRUE)} corresponds to elements \code{1} and \code{3}
of \code{.x} (if they exist). As does \code{.at = c(1, 3)} and \code{.at = c(1.0, 3.0)}.

By default, \code{.at} is an empty logical vector.}

\item{.f}{\verb{[function / list]}

Vectorized character manipulation functions used to format \code{.x}. \code{.f} may be:
\itemize{
\item A named function, e.g. \link[cli:ansi-styles]{cli::style_bold}
\item An anonymous function, e.g. \verb{\\(words) gsub("hi", "hey", words)}
\item A purrr-style lambda, e.g. \code{~ paste0(.h, "!")}, \code{~ "fizz"}
\item A list of functions or lambdas, e.g. \code{list(~ cli::col_red(.x), toupper)}
}

Each formatter function in \code{.f} will receive a character vector (of variable length)
as it's only argument. A formatter must return a character vector the same
length as it's input or of length 1 (in which case the result is recycled to
the length of the input character).

ANSI string vectors (class \code{cli_ansi_string}) are also supported (see
\link[cli:ansi-styles]{cli::ansi-styles} for details).

By default \code{.f} is the function \verb{[cli::bg_br_yellow()]} which changes the
background color of it's input text to bright yellow. You can modify this
default by setting the \code{vlightr.default_formatter} in \code{\link[=options]{options()}}.}

\item{...}{\verb{[formula / vlightr_highlighter]}

For \code{templight_mult()} and \code{templight_case()}, a two sided formula with
locations on the left-hand-side and a formatter on the right-hand-side. This
argument replaces the \code{.at} and \code{.f} arguments of \code{templight()}. The ith dot
\code{..i} is roughly equivalent to \code{.at[[i]] ~ .f[[i]]}.

The left-hand-side of the formula may be:
\itemize{
\item A logical vector, e.g. \code{c(TRUE, FALSE)}, \code{letters == "r"}
\item Numeric indices, e.g. \code{c(1, 2, 3)}, \code{which(letters \%in\% c("q", "r"))}
}

The right-hand-side of the formula may be:
\itemize{
\item A named function, e.g. \code{cli::style_hidden}
\item An anonymous function, e.g. \verb{\\(x) tolower(trimws(x))}
\item A purrr-style lambda expression, e.g. \code{paste(seq_along(.x), "is", .x)}
}

A temp-lighter, e.g. \code{templighter(c(1, 2, 3), color("blue"))}, may be
supplied instead of a formula, in which case the arguments \code{.at} and \code{.f}
of the temp-lighter are spliced into \code{...}.

In the case of \code{templight_case()}, elements of \code{.x} can be conditionally
formatted at most once. An element of \code{.x} at index \code{i} will be formatted
using the formatter corresponding to the first \code{.at} selection where \code{i}
appears.}
}
\value{
A vector of class \code{vlightr_templight}. For \code{templight_case()}, the a
vector of class \code{vlightr_templight/vlightr_highlight_case}.
}
\description{
\code{templight()} creates a vector with a conditional \code{\link[=format]{format()}}
and \code{\link[=print]{print()}} method. The function takes an input vector \code{.x}, a vector
of locations \code{.at}, and a formatter function \code{.f}. When the result of
\code{templight(.x, .at, .f)} is printed, elements of \code{.x} at indices specified
by \code{.at} are transformed by \code{.f} before they are printed.

\code{.at} and \code{.f} may be equal length lists of indexes and functions. Elements
of \code{.x} at locations \code{.at[[i]]} are transformed using \code{.f[[i]]}. Conditional
formats are applied to the highlighted vector in the order that they are
applied to \code{.at} and \code{.f}.

\code{templight_mult()} and \code{templight_case()} allow these pairs of locations and
functions to be supplied as two-sided formulas \code{.at ~ .f} using \code{\link[dplyr:case_when]{dplyr::case_when()}}
style syntax.

\code{tl()} and \code{templight()} are synonyms, as are \code{tl_mult()} and
\code{templight_mult()}, \code{tl_case()} and \code{templight_case()}.
}
\details{
Vectors highlighted by \code{templight()} are said to be "temporarily"
conditionally formatted because the association between \code{.at} and
the elements of \code{.x} is likely to exist only temporarily.

For example, the code below creates a temp-lighted vector \code{minimum_tl}
which conditionally formats the minimum element of \code{x}.

\if{html}{\out{<div class="sourceCode">}}\preformatted{x <- c(4, 3, 0, 2, 1)
minimum_tl <- templight(x, .at = x == min(x), .f = wrap("<", ">"))
print(minimum_tl) # 4 3 <0> 2 1
}\if{html}{\out{</div>}}

When the vector \code{minimum_tl} is altered, by sorting it for example, the
conditionally formatted element is no longer the minimum value of \code{x},
it is whatever happens to be the third element of the temp-lighted vector.

\if{html}{\out{<div class="sourceCode">}}\preformatted{print(sort(minimum_tl)) # 0 1 <2> 3 4
}\if{html}{\out{</div>}}

This is in contrast to vectors created using \code{highlight()}, which maintain
an association between specific elements of the data \code{x} and a conditional
format \code{.f}.

\if{html}{\out{<div class="sourceCode">}}\preformatted{# Highlight the minimum element of `x` (i.e. 0)
minimum_hl <- highlight(x, .t = ~ .x == min(.x), .f = wrap("<", ">"))

# The minimum element of `x` is still highlighted after sorting
print(sort(minimum_hl)) # <0> 1 2 3 4
}\if{html}{\out{</div>}}
}
\seealso{
\code{\link[=highlight]{highlight()}} for conditionally formatting elements of a vector \code{.x}
for which a test \code{.t} returns \code{TRUE}.

\code{\link[=is_highlightable]{is_highlightable()}} for testing whether an object can be highlighted.

\code{\link[=un_highlight]{un_highlight()}} for converting a vector \code{highlight(.x)} back to \code{.x}.

\code{\link[=tests]{tests()}}, \code{\link[=formatters]{formatters()}}, \code{\link[=highlight_functions]{highlight_functions()}} for setting and
getting the values of \code{.t} (i.e. tests) and \code{.f} (i.e. formatters) of a
highlighted vector.

\code{\link[=color]{color()}} and friends for generating formatter functions for use in \code{.f}.
}
