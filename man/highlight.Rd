% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/highlight.R
\name{highlight}
\alias{highlight}
\title{Conditionally format a vector}
\usage{
highlight(
  x = logical(),
  conditions = list(),
  formatters = list(),
  description = NULL,
  precedence = NULL,
  format_once = FALSE,
  init_formatter = NULL,
  last_formatter = NULL
)
}
\arguments{
\item{x}{\verb{[vector]}

A vector to highlight. Conceptually, a vector is a collection of objects of
size 1.

\code{x} is considered a vector if:
\itemize{
\item \code{x} is not a \link{data.frame}.
\item \code{x} is not a bare \link{list}.
\item \code{x} is otherwise a vector, as defined by \code{\link[vctrs:vector-checks]{vctrs::obj_is_vector()}}.
}

Atomic vector types \code{"logical"}, \code{"integer"}, \code{"double"}, \code{"complex"},
\code{"character"}, and \code{"raw"} meet these criteria. As do vectors defined
via the vctrs package.}

\item{conditions}{\verb{[function / list]}

A vectorized predicate function (i.e. a function which returns a logical
vector the same length as it's input) or a list of such functions.}

\item{formatters}{\verb{[function / list]}

A vectorized formatter function (i.e. a function which returns a character
vector the same length as it's input) or a list of such functions.

A formatter may also return an ANSI colored string (class cli_ansi_string),
used for printing colored, highlighted, and emphasized text to the terminal.
See \link[=ansi-styles]{cli} for details.}

\item{description}{\verb{[character / NULL]}

Hello.}

\item{precedence}{\verb{[numeric / NULL]}

Hello.}

\item{format_once}{\verb{[logical(1)]}

Hello.}

\item{init_formatter}{\verb{[function]}

Hello.}

\item{last_formatter}{\verb{[function]}

Hello.}
}
\value{
A highlighted vector containing the same data as \code{x}.
}
\description{
\code{highlight()} creates a \code{vlighter_highlight} vector with a
conditional \code{format()} method.
}
\examples{

# Color NA values red
x <- c(1, 0, NA, 1, 0)
x_hl <- highlight(x, is.na, color("red"))
print(x)
print(x_hl)

# Re-label indicators 1 and 0, by adding additional highlights to `x_hl`
x_hl <- highlight(
  x_hl,
  list(~ .x == 1, ~ .x == 0),
  list(~paste(.x, "[Yes]"), ~paste(.x, "[No]")
)
print(x_hl)

# Create an equivalent vector using `dplyr::case_when` style syntax. The right
# hand side `formatters` must be explicit functions.
x_hl_case <- highlight_case(
  x,
  is.na(.x) ~ colour("red"),
  .x == 1 ~ \(x) paste(x, "[Yes]"),
  .x == 0 ~ \(x) paste(x, "[No]")
)
print(x_hl_case)

}
