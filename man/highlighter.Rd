% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/highlight.R
\name{highlighter}
\alias{highlighter}
\alias{highlighter_mult}
\alias{highlighter_case}
\title{Generate a re-usable highlight function}
\usage{
highlighter(.t, .f)

highlighter_mult(...)

highlighter_case(...)
}
\arguments{
\item{.t}{\verb{[function / list]}

Vectorized test functions specified as:
\itemize{
\item A named function, e.g. \code{is.na}
\item An anonymous function, e.g. \verb{\\(x) 0 <= x & x <= 1}
\item A purrr-style lambda, e.g. \code{~ nchar(.x) > 0}, \code{~ .h == 1}, \code{~ TRUE}
\item A list of functions or lambdas, e.g. \code{list(~ .x < mean(.x), is.finite)}
}

In the generated function, each function in \code{.t} will receive a vector \code{.x}
as it's input and must return a logical vector the same length as \code{.x} or of
length 1 (in which case the result will be recycled to the length of \code{.x}).}

\item{.f}{\verb{[function / list]}

Vectorized character manipulation functions specified as:
\itemize{
\item A named function, e.g. \link[cli:ansi-styles]{cli::style_bold}
\item An anonymous function, e.g. \verb{\\(words) gsub("hi", "hey", words)}
\item A purrr-style lambda, e.g. \code{~ paste0(.h, "!")}, \code{~ "fizz"}
\item A list of functions or lambdas, e.g. \code{list(~ cli::col_red(.x), toupper)}
}

In the generated function, each formatter function in \code{.f} will receive a
character vector (of variable length) as it's only argument. A formatter must
return a character vector the same length as it's input or of length 1 (in
which case the result is recycled to the length of the input character).}

\item{...}{\verb{[formula / vlightr_highlighter]}

For \code{highlighter_mult()} and \code{highlighter_case()}, a two sided formula with
a test on the left-hand-side and a formatter on the right-hand-side. This
argument replaces the \code{.t} and \code{.f} arguments of \code{highlighter()}. The ith dot
\code{..i} is roughly equivalent to \code{.t[[i]] ~ .f[[i]]}.

See the \code{...} argument of \code{\link[=highlight]{highlight()}} for more details on valid arguments
to supply to \code{...}.}
}
\value{
A function of class \code{vlightr_highlighter}. For \code{highlighter_case()}, a
function of class \code{vlightr_highlighter/vlightr_highlighter_case}.
}
\description{
Generates a partially applied version of the \code{\link[=highlight]{highlight()}} function, with
pre-supplied tests \code{.t} and formatters \code{.f}.

The following calls produce equivalent highlighted vectors:
\itemize{
\item \code{highlight(.x = .x, .t = .t, .f = .f)}
\item \code{highlighter(.t = .t, .f = .f)(.x = .x)}
}

This is useful for creating and storing a re-usable conditional format
to apply to vectors.

\code{highlighter_mult()} and \code{highlighter_case()} (corresponding to \code{highlight_mult()}
and \code{hightlight_case()}) allow \code{.t} and \code{.f} to be supplied as two-sided
formulas of the form \code{.t ~ .f}.
}
\examples{
# Mimic an existing highlighted vector
indicator <- c(1, 0, 1, 0)
indicator_hl <- highlight_mult(
 indicator,
 0 ~ label("No"),
 1 ~ label("Yes")
)
indicator_hltr <- highlighter_mult(
 0 ~ label("No"),
 1 ~ label("Yes")
)

# These print the same result
print(indicator_hl)
print(indicator_hltr(indicator))

# You can add functionality to an existing highlighter by
# providing it as an argument to `highlighter_mult()`.
new_indicator_hltr <- highlighter_mult(
  indicator_hltr,
  5 ~ "Maybe",
  is.na ~ "?"
)
x <- c(0, 1, NA, 5)
indicator_hltr(x) # NA and 5 are un-formatted
new_indicator_hltr(x) # NA and 5 are formatted

# This is useful for composing highlighters
exclaim <- highlighter(~ .x == toupper(.x), ~ paste0(.x, "!"))
question <- highlighter(~ .x == tolower(.x), ~ paste0(.x, "?"))
punctuate <- highlighter_mult(exclaim, question)

# `punctuate()` applies the formatting of `exclaim()` and `question()`
phrases <- c("hi all", "FANTASTIC", "I'm Dave")
exclaim(phrases)
question(phrases)
punctuate(phrases)

# `highlighter_case()` uses the same matching behavior as
# `highlight_case()`.
fullstop <- highlighter(~ TRUE, ~ paste0(.x, "."))
punctuate_mult <- highlighter_mult(punctuate, fullstop)
punctuate_case <- highlighter_case(punctuate, fullstop)

# A period is added to every phrase, since the `fullstop()`
# test always returns `TRUE`
punctuate_mult(phrases)

# A period is only added to elements of phrase not already
# matched by a previous test.
punctuate_case(phrases)

}
