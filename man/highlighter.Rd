% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/highlight.R
\name{highlighter}
\alias{highlighter}
\alias{highlighter_case}
\title{Generate a highlight function with custom default arguments}
\usage{
highlighter(
  conditions = list(),
  formatters = list(),
  description = NULL,
  precedence = NULL,
  format_once = FALSE,
  init_formatter = NULL,
  last_formatter = NULL
)

highlighter_case(
  ...,
  .description = NULL,
  .precedence = NULL,
  .format_once = TRUE,
  .init_formatter = NULL,
  .last_formatter = NULL
)
}
\arguments{
\item{conditions}{\verb{[function / list]}

Functions that indicate which elements of \code{x} to format. Can be a:
\itemize{
\item Function, e.g. \code{is.na}
\item A purrr-style lambda, e.g. \code{~ nchar(.x) > 0}, \code{~ TRUE}
\item A list of functions or lambdas, e.g. \code{list(~ .x < mean(.x), is.infinite)}
}

Each function in \code{conditions} will receive \code{x} as it's input and must return
a logical vector the same length as \code{x} or of length 1 (in which case the
result will be recycled to the length of \code{x}).

Elements of \code{x} for which \code{conditions[[i]](x)} is \code{TRUE} are formatted using
the formatter function \code{formatters[[i]]}. Consequently, an equal number of
\code{conditions} and \code{formatters} must be supplied.}

\item{formatters}{\verb{[function / list]}

Character manipulation functions used to format \code{x}. Can be a:
\itemize{
\item Function, e.g. \link[cli:ansi-styles]{cli::style_bold}
\item A purrr-style lambda, e.g. \code{~ paste0(.x, "!")}, \code{~ "Hi"}
\item A list of functions or lambdas, e.g. \code{list(~ cli::col_red, toupper)}
}

When called, a function in \code{formatters} will receive a single character vector
(of variable length) as it's only argument. A formatter must return a character
vector the same length as it's input or of length 1 (in which case the result
is recycled to the length of the input character).

ANSI string vectors (class \code{cli_ansi_string}) are also supported (see
\link[cli:ansi-styles]{cli::ansi-styles} for details).

The same number of \code{formatters} and \code{conditions} must be supplied.}

\item{description, .description}{\verb{[character / NULL]}

An optional description of the conditional format applied by each function
in \code{formatters}. This information is used by \code{\link[=describe_highlight]{describe_highlight()}}.

If supplied, \code{description} must be the same length as \code{formatters} and
\code{conditions}.}

\item{precedence, .precedence}{\verb{[numeric / NULL]}

A numeric vector indicating the order in which to apply the \code{formatters}. The
formatter with the lowest corresponding \code{precedence} value is evaluated first
during formatting. By default \code{formatters} are applied in the order in which
they were supplied.

If supplied, \code{precedence} must be the same length as \code{formatters} and
\code{conditions}.}

\item{format_once, .format_once}{\verb{[logical(1)]}

A \code{TRUE} or \code{FALSE} value. Indicates whether an element of \code{x} which meets
multiple \code{conditions} should be formatted only once (using the formatter
corresponding to the first condition met) or formatted multiple times (using
all of the corresponding \code{formatters}).

\code{format_once} is \code{FALSE} by default in \code{highlight()} and \code{TRUE} by default in
\code{highlight_case()}.}

\item{init_formatter, .init_formatter}{\verb{[function / NULL]}

The first function used to format \code{x}. When the highlighted vector is formatted,
\code{init_formatter(x)} is called prior to conditionally formatting \code{x} (i.e. before
any of the \code{formatters} are called.

If \code{NULL}, then \code{format(x)} is called instead.}

\item{last_formatter, .last_formatter}{\verb{[function / NULL]}

The last function called to format \code{x}. The \code{last_formatter} is applied
after \code{x} has been conditionally formatted (i.e. after the \code{init_formatter}
and \code{formatters} functions have been called).

\code{last_formatter} will receive a character vector the same length as
\code{x} as it's only argument. If \code{NULL}, the conditionally formatted \code{x}
is returned as is after formatting.}

\item{...}{\verb{[formula]}

This argument replaces the \code{formatters} and \code{conditions} arguments of
\code{highlighter()}. The i-th dot supplied is roughly equivalent to
\code{conditions[[i]] ~ formatters[[i]]}.

The left-hand-side and right-hand-side of the formula may be a:
\itemize{
\item Function, e.g. \code{rlang::is_string}, \code{toupper}
\item A purrr-style lambda expression, e.g. \code{TRUE}, \code{paste(.x, "?")}
}

The left-hand-side and righ-hand-side of the formula may not be a call to a
generator function (i.e. a function which returns another function). Examples
include \code{\link[=wrap]{wrap()}}, \code{\link[=color]{color()}}, and \code{\link[=bg]{bg()}}. To use such a function, call it
within a lambda expression instead, e.g. \code{color("blue")(.x)}.

Examples of arguments to \code{...} include:
\itemize{
\item Colour \code{NA} values red: \code{is.na ~ cli::col_red}
\item Add an exclamation mark: \code{toupper(.x) == .x ~ paste0(.x, "!")}
\item Replace 1's with 2's: \code{.x == 1 ~ "2"}
\item Colour the background yellow by default: \code{TRUE ~ bg("yellow")(.x)}
}}
}
\description{
Produces a partially applied version of the \code{\link[=highlight]{highlight()}} function, with
specified arguments pre-filled. The resulting function can be used to highlight
a vector \code{x} using a default conditional format.

Assuming that arguments \code{x}, \code{conditions}, and \code{formatters} are valid, the
following are equivalent:
\itemize{
\item \code{highlight(x = x, conditions = conditions, formatters = formatters)}
\item \code{highlighter(conditions = conditions, formatters = formatters)(x)}
}

The output function has the same arguments as \code{highlight()}. If arguments
\code{conditions}, \code{formatters}, \code{description}, or \code{precedence} are supplied to
a highlighter function, then the user arguments are appended to the pre-filled
arguments prior to highlighting.

If arguments \code{format_once}, \code{init_formatter}, or \code{last_formatter} are supplied
to a highlighter, then the supplied arguments override the pre-filled defaults.
}
\examples{
# Mimic an existing highlighted vector
dummy <- c(1L, NA, 0L, 1L, NA)
dummy_hl <- highlight_case(
 x = dummy,
 .x == 0 ~ paste0(.x, "[No]"),
 .x == 1 ~ paste0(.x, "[Yes]"),
 is.na ~ color("red")
)
dummy_hlghtr <- highlighter_case(
 .x == 0 ~ paste0(.x, "[No]"),
 .x == 1 ~ paste0(.x, "[Yes]"),
 is.na ~ color("red")
)
print(dummy_hl)
print(dummy_hlghtr(x = x))

# Apply a higlighter to a new vector
dummy_hlghtr(c(-2L, -1L, 0L, 1L, 2L, NA))

# Provide additional arguments to a highlighter
dummy_hlghtr(
  x = c(1L, NA, 2L, 0L, 1L, NA, 2L),
  conditions = ~ .x == 2,
  formatters = ~ paste(.x, "[Double Yes]")
)

# Override default highlighter arguments
secret <- highlighter(
  ~ grepl("^<.*>$", .x),
  ~ strrep("x", nchar(.x) - 2L),
  last_formatter = toupper
)
message <- c("<A>", "Super", "<Secret>", "Message")
secret(message)
secret(message, last_formatter = tolower)
}
