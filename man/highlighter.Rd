% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/highlight.R
\name{highlighter}
\alias{highlighter}
\title{Generate a highlight function with custom default arguments}
\usage{
highlighter(.t, .f)
}
\arguments{
\item{.t}{\verb{[function / list]}

Vectorized test functions that indicate which elements of \code{.x}
to conditionally format. \code{.t} may be:
\itemize{
\item A named function, e.g. \code{is.na}
\item An anonymous function, e.g. \verb{\\(x) 0 <= x & x <= 1}
\item A purrr-style lambda, e.g. \code{~ nchar(.x) > 0}, \code{~ .h == 1}, \code{~ TRUE}
\item A list of functions or lambdas, e.g. \code{list(~ .x < mean(.x), is.finite)}
}

Each function in \code{.t} will receive \code{.x} as it's input and must return
a logical vector the same length as \code{.x} or of length 1 (in which case the
result will be recycled to the length of \code{.x}).

By default \code{.t} is the function \code{false_along()} which returns \code{FALSE} for
every element of it's input. You can modify this default by setting the
\code{vlightr.default_test} in \code{\link[=options]{options()}}.}

\item{.f}{\verb{[function / list]}

Vectorized character manipulation functions used to format \code{.x}. Can be a:
\itemize{
\item A named function, e.g. \link[cli:ansi-styles]{cli::style_bold}
\item An anonymous function, e.g. \verb{\\(words) gsub("hi", "hey", words)}
\item A purrr-style lambda, e.g. \code{~ paste0(.h, "!")}, \code{~ "fizz"}
\item A list of functions or lambdas, e.g. \code{list(~ cli::col_red(.x), toupper)}
}

Each function in \code{.f} will receive a character vector (of variable length)
as it's only argument. A formatter must return a character vector the same
length as it's input or of length 1 (in which case the result is recycled to
the length of the input character).

ANSI string vectors (class \code{cli_ansi_string}) are also supported (see
\link[cli:ansi-styles]{cli::ansi-styles} for details).

By default \code{.f} is the function \verb{[cli::bg_br_yellow()]} which changes the
background color of it's input text to bright yellow. You can modify this
default by setting the \code{vlightr.default_formatter} in \code{\link[=options]{options()}}.}

\item{...}{\verb{[formula]}

This argument replaces the \code{formatters} and \code{conditions} arguments of
\code{highlighter()}. The i-th dot supplied is roughly equivalent to
\code{conditions[[i]] ~ formatters[[i]]}.

The left-hand-side and right-hand-side of the formula may be a:
\itemize{
\item Function, e.g. \code{rlang::is_string}, \code{toupper}
\item A purrr-style lambda expression, e.g. \code{TRUE}, \code{paste(.x, "?")}
}

The left-hand-side and righ-hand-side of the formula may not be a call to a
generator function (i.e. a function which returns another function). Examples
include \code{\link[=wrap]{wrap()}}, \code{\link[=color]{color()}}, and \code{\link[=bg]{bg()}}. To use such a function, call it
within a lambda expression instead, e.g. \code{color("blue")(.x)}.

Examples of arguments to \code{...} include:
\itemize{
\item Colour \code{NA} values red: \code{is.na ~ cli::col_red}
\item Add an exclamation mark: \code{toupper(.x) == .x ~ paste0(.x, "!")}
\item Replace 1's with 2's: \code{.x == 1 ~ "2"}
\item Colour the background yellow by default: \code{TRUE ~ bg("yellow")(.x)}
}}
}
\description{
Produces a partially applied version of the \code{\link[=highlight]{highlight()}} function, with
specified arguments pre-filled. The resulting function can be used to highlight
a vector \code{x} using a default conditional format.

Assuming that arguments \code{x}, \code{conditions}, and \code{formatters} are valid, the
following are equivalent:
\itemize{
\item \code{highlight(x = x, conditions = conditions, formatters = formatters)}
\item \code{highlighter(conditions = conditions, formatters = formatters)(x)}
}

The output function has the same arguments as \code{highlight()}. If arguments
\code{conditions}, \code{formatters}, \code{description}, or \code{precedence} are supplied to
a highlighter function, then the supplied arguments are appended to the pre-filled
arguments prior to highlighting.

If arguments \code{format_once}, \code{init_formatter}, or \code{last_formatter} are supplied
to a highlighter, then the supplied arguments override the pre-filled defaults.
}
\examples{
# Mimic an existing highlighted vector
dummy <- c(1L, NA, 0L, 1L, NA)
dummy_hl <- highlight_case(
 dummy,
 .x == 0 ~ paste0(.x, "[No]"),
 .x == 1 ~ paste0(.x, "[Yes]"),
 is.na ~ cli::col_red
)
dummy_hlghtr <- highlighter_case(
 .x == 0 ~ paste0(.x, "[No]"),
 .x == 1 ~ paste0(.x, "[Yes]"),
 is.na ~ cli::col_red
)
print(dummy_hl)
print(dummy_hlghtr(dummy))

# Apply a higlighter to a new vector
dummy_hlghtr(c(-2L, -1L, 0L, 1L, 2L, NA))

# Provide additional arguments to a highlighter
dummy_hlghtr(
  x = c(1L, NA, 2L, 0L, 1L, NA, 2L),
  conditions = ~ .x == 2,
  formatters = ~ paste(.x, "[Double Yes]")
)

# Override default highlighter arguments
secret <- highlighter(
  ~ grepl("^<.*>$", .x),
  ~ strrep("x", nchar(.x) - 2L),
  last_formatter = toupper
)
message <- c("<A>", "Super", "<Secret>", "Message")
secret(message)
secret(message, last_formatter = tolower)
}
