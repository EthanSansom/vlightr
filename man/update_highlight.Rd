% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/highlight.R
\name{update_highlight}
\alias{update_highlight}
\title{Update a highlighted vector's format method}
\usage{
update_highlight(
  x,
  conditions = NULL,
  formatters = NULL,
  description = NULL,
  precedence = NULL,
  format_once = NULL,
  init_formatter = NULL,
  last_formatter = NULL
)
}
\arguments{
\item{x}{\verb{[vlightr_highlight]}

A highlighted vector to update.}

\item{conditions}{\verb{[function / list]}

Functions that indicate which elements of \code{x} to format. Can be a:
\itemize{
\item Function, e.g. \code{is.na}
\item A purrr-style lambda, e.g. \code{~ nchar(.x) > 0}
\item A list of functions or lambdas, e.g. \code{list(~ .x < mean(.x), is.infinite)}
}

Each function in \code{conditions} will receive \code{x} as it's input and must return
a logical vector the same length as \code{x} or of length 1 (in which case the
result will be recycled to the length of \code{x}).

Elements of \code{x} for which \code{conditions[[i]](x)} is \code{TRUE} are formatted using
the formatter function \code{formatters[[i]]}. Consequently, an equal number of
\code{conditions} and \code{formatters} must be supplied.}

\item{formatters}{\verb{[function / list]}

Character manipulation functions used to format \code{x}. Can be a:
\itemize{
\item Function, e.g. \link[cli:ansi-styles]{cli::style_bold}
\item A purrr-style lambda, e.g. \code{~ paste0(.x, "!")}
\item A list of functions or lambdas, e.g. \code{list(~ cli::col_red, toupper)}
}

When called, a function in \code{formatters} will receive a single character vector
(of variable length) as it's only argument. A formatter must return a character
vector the same length as it's input. ANSI string vectors (class
\code{cli_ansi_string}) are also supported (see \link[cli:ansi-styles]{cli::ansi-styles} for details).

The same number of \code{formatters} and \code{conditions} must be supplied.}

\item{description}{\verb{[character / NULL]}

An optional description of the format applied by each function in
\code{formatters}. This information is used by \code{\link[=describe_highlight]{describe_highlight()}}.

If supplied, \code{description} must be the same length as \code{formatters} and
\code{conditions}.}

\item{precedence}{\verb{[numeric / NULL]}

A numeric vector indicating the order in which to apply the \code{formatters}. The
formatter with the lowest corresponding \code{precedence} value is evaluatted first
during formatting. By default \code{formatters} are applied in the order in which
they were supplied.

If supplied, \code{precedence} must be the same length as \code{formatters} and
\code{conditions}.}

\item{format_once}{\verb{[logical(1)]}

A \code{TRUE} or \code{FALSE} value. Indicates whether an element of \code{x} which meets
multiple \code{conditions} should be formatted only once (using the formatter
corresponding to the first condition met) or formatted multiple times (using
all of the corresponding \code{formatters}).

\code{format_once} is \code{FALSE} by default in \code{highlight()} and \code{TRUE} by default in
\code{highlight_case()} (to mimic the behavior of conditions in \code{\link[dplyr:case_when]{dplyr::case_when()}}).}

\item{init_formatter}{\verb{[function / NULL]}

The first function used to format \code{x}. \code{init_formatter(x)} is called prior
to conditionally formatting \code{x} using the \code{formatters} functions. If \code{NULL},
then \code{format(x)} is called instead.}

\item{last_formatter}{\verb{[function / NULL]}

The last function called to format \code{x}. The \code{last_formatter} is applied
after \code{x} has been conditionally formatted (i.e. after the \code{init_formatter}
and \code{formatters} functions have been applied).

\code{last_formatter} will receive a character vector the same length as
\code{x} as it's only argument. If \code{NULL}, the conditionally formatted \code{x}
is returned as is by \code{format()}.}
}
\description{
\code{update_highlight()} sets any of the \code{conditions},
\code{formatters}, \code{description}, \code{precedence}, \code{format_once}, \code{init_formatter},
or \code{last_formatter} attributes in an already highlighted vector and validates
the result.

Updated attributes must conform to the existing attributes. For example, a
supplied list of \code{conditions} functions must be the same length as the
existing \code{formatters} attribute of \code{x}.
}
\examples{
salary <- 1000 * c(10, 87, 13, 56, 92, 105, NA)
salary <- highlight_case(salary)
}
\seealso{
Other attribute setters: 
\code{\link{attr-setters}}
}
\concept{attribute setters}
